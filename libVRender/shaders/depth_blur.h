#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input depth_blur.glsl --output depth_blur.h --slang glsl300es

    Overview:

        Shader program 'depth_blur':
            Get shader desc: depth_blur_shader_desc(sg_query_backend());
            Vertex shader: depth_blur_vs
                Attribute slots:
                    ATTR_depth_blur_vs_pos = 0
            Fragment shader: depth_blur_fs
                Uniform block 'depth_blur_params':
                    C struct: depth_blur_params_t
                    Bind slot: SLOT_depth_blur_params = 0
                Image 'tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex = 0

        Shader program 'kuwahara_blur':
            Get shader desc: kuwahara_blur_shader_desc(sg_query_backend());
            Vertex shader: kuwahara_filter_vs
                Attribute slots:
                    ATTR_kuwahara_filter_vs_pos = 0
            Fragment shader: kuwahara_filter_fs
                Image 'colorTexture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_colorTexture = 0


    Shader descriptor structs:

        sg_shader depth_blur = sg_make_shader(depth_blur_shader_desc(sg_query_backend()));
        sg_shader kuwahara_blur = sg_make_shader(kuwahara_blur_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'depth_blur_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_depth_blur_vs_pos] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'kuwahara_filter_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_kuwahara_filter_vs_pos] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex = 0;
        SLOT_colorTexture = 0;

    Bind slot and C-struct for uniform block 'depth_blur_params':

        depth_blur_params_t depth_blur_params = {
            .kernelSize = ...;
            .scale = ...;
            .pnear = ...;
            .pfar = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_depth_blur_params, &SG_RANGE(depth_blur_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_depth_blur_vs_pos (0)
#define ATTR_kuwahara_filter_vs_pos (0)
#define SLOT_tex (0)
#define SLOT_colorTexture (0)
#define SLOT_depth_blur_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct depth_blur_params_t {
    int kernelSize;
    float scale;
    float pnear;
    float pfar;
} depth_blur_params_t;
#pragma pack(pop)
/*
    #version 300 es
    
    layout(location = 0) in vec2 pos;
    out vec2 uv;
    
    void main()
    {
        gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
        uv = pos;
    }
    
*/
static const char depth_blur_vs_source_glsl300es[156] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x70,0x6f,0x73,0x20,0x2a,0x20,0x32,0x2e,0x30,
    0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x2c,0x20,0x30,
    0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,
    0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    struct depth_blur_params
    {
        int kernelSize;
        highp float scale;
        highp float pnear;
        highp float pfar;
    };
    
    uniform depth_blur_params _23;
    
    uniform highp sampler2D tex;
    
    in highp vec2 uv;
    layout(location = 0) out highp float frag_color;
    
    highp float getld(highp float d)
    {
        return ((2.0 * _23.pnear) * _23.pfar) / ((-(d * 2.0 + (-1.0))) * (_23.pfar - _23.pnear) + (_23.pfar + _23.pnear));
    }
    
    void main()
    {
        highp vec2 _66 = vec2(_23.scale) / vec2(textureSize(tex, 0));
        highp float _74 = float(_23.kernelSize);
        highp float _76 = _74 * 0.16666667163372039794921875;
        highp float _86 = 1.0 / ((_74 * 1.0471975803375244140625) * _76);
        highp float color = 0.0;
        highp float totalWeight = 0.0;
        highp vec4 _96 = texture(tex, uv);
        highp float _99 = _96.x;
        if (_99 == 1.0)
        {
            frag_color = 1.0;
            return;
        }
        highp float param = _99;
        highp float _111 = getld(param);
        int _115 = (-_23.kernelSize) / 2;
        int i = _115;
        for (;;)
        {
            int _123 = _23.kernelSize / 2;
            if (i <= _123)
            {
                for (int j = _115; j <= _123; j++)
                {
                    highp float _140 = float(i);
                    highp float _143 = float(j);
                    highp vec4 _155 = texture(tex, vec2(_140, _143) * _66 + uv);
                    highp float _156 = _155.x;
                    if (_156 == 1.0)
                    {
                        continue;
                    }
                    highp float param_1 = _156;
                    if (abs(getld(param_1) - _111) > 0.100000001490116119384765625)
                    {
                        continue;
                    }
                    highp float _188 = exp((-(_140 * _140 + (_143 * _143))) / ((_74 * 0.3333333432674407958984375) * _76));
                    color = _156 * (_86 * _188) + color;
                    totalWeight = _86 * _188 + totalWeight;
                }
                i++;
                continue;
            }
            else
            {
                break;
            }
        }
        if (totalWeight == 0.0)
        {
            frag_color = _99;
        }
        else
        {
            frag_color = color / totalWeight;
        }
    }
    
*/
static const char depth_blur_fs_source_glsl300es[2184] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x62,0x6c,0x75,0x72,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x53,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,
    0x61,0x6c,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x6e,0x65,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x66,0x61,0x72,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x64,0x65,
    0x70,0x74,0x68,0x5f,0x62,0x6c,0x75,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,
    0x5f,0x32,0x33,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,
    0x78,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x5f,0x32,
    0x33,0x2e,0x70,0x6e,0x65,0x61,0x72,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x70,
    0x66,0x61,0x72,0x29,0x20,0x2f,0x20,0x28,0x28,0x2d,0x28,0x64,0x20,0x2a,0x20,0x32,
    0x2e,0x30,0x20,0x2b,0x20,0x28,0x2d,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,
    0x28,0x5f,0x32,0x33,0x2e,0x70,0x66,0x61,0x72,0x20,0x2d,0x20,0x5f,0x32,0x33,0x2e,
    0x70,0x6e,0x65,0x61,0x72,0x29,0x20,0x2b,0x20,0x28,0x5f,0x32,0x33,0x2e,0x70,0x66,
    0x61,0x72,0x20,0x2b,0x20,0x5f,0x32,0x33,0x2e,0x70,0x6e,0x65,0x61,0x72,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x32,0x33,
    0x2e,0x73,0x63,0x61,0x6c,0x65,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,
    0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x5f,0x32,0x33,0x2e,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x53,0x69,0x7a,0x65,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x37,0x36,0x20,0x3d,0x20,0x5f,0x37,0x34,0x20,0x2a,0x20,0x30,0x2e,
    0x31,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x31,0x36,0x33,0x33,0x37,0x32,0x30,0x33,
    0x39,0x37,0x39,0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x36,0x20,
    0x3d,0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x28,0x5f,0x37,0x34,0x20,0x2a,0x20,
    0x31,0x2e,0x30,0x34,0x37,0x31,0x39,0x37,0x35,0x38,0x30,0x33,0x33,0x37,0x35,0x32,
    0x34,0x34,0x31,0x34,0x30,0x36,0x32,0x35,0x29,0x20,0x2a,0x20,0x5f,0x37,0x36,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,
    0x6f,0x74,0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x30,0x2e,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x39,0x36,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,
    0x65,0x78,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x39,0x20,0x3d,0x20,0x5f,
    0x39,0x36,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x39,
    0x39,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x39,0x39,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,
    0x31,0x20,0x3d,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x31,0x35,0x20,0x3d,
    0x20,0x28,0x2d,0x5f,0x32,0x33,0x2e,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x53,0x69,0x7a,
    0x65,0x29,0x20,0x2f,0x20,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x69,0x20,0x3d,0x20,0x5f,0x31,0x31,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,
    0x72,0x20,0x28,0x3b,0x3b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x32,0x33,0x20,0x3d,0x20,
    0x5f,0x32,0x33,0x2e,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x53,0x69,0x7a,0x65,0x20,0x2f,
    0x20,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x69,0x20,0x3c,0x3d,0x20,0x5f,0x31,0x32,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x6a,0x20,0x3d,0x20,0x5f,0x31,
    0x31,0x35,0x3b,0x20,0x6a,0x20,0x3c,0x3d,0x20,0x5f,0x31,0x32,0x33,0x3b,0x20,0x6a,
    0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x34,0x30,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x69,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x33,0x20,
    0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x6a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x35,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x5f,0x31,0x34,0x30,0x2c,0x20,0x5f,0x31,0x34,0x33,0x29,0x20,0x2a,0x20,0x5f,0x36,
    0x36,0x20,0x2b,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,0x36,0x20,0x3d,0x20,0x5f,0x31,0x35,0x35,
    0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x36,0x20,0x3d,0x3d,0x20,
    0x31,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,0x69,
    0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x31,0x35,
    0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x61,0x62,0x73,0x28,0x67,0x65,0x74,0x6c,0x64,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x20,0x2d,0x20,0x5f,0x31,0x31,0x31,
    0x29,0x20,0x3e,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,
    0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,
    0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,0x69,0x6e,0x75,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x31,0x38,0x38,0x20,0x3d,0x20,0x65,0x78,0x70,0x28,0x28,0x2d,0x28,0x5f,
    0x31,0x34,0x30,0x20,0x2a,0x20,0x5f,0x31,0x34,0x30,0x20,0x2b,0x20,0x28,0x5f,0x31,
    0x34,0x33,0x20,0x2a,0x20,0x5f,0x31,0x34,0x33,0x29,0x29,0x29,0x20,0x2f,0x20,0x28,
    0x28,0x5f,0x37,0x34,0x20,0x2a,0x20,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,
    0x34,0x33,0x32,0x36,0x37,0x34,0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,
    0x37,0x35,0x29,0x20,0x2a,0x20,0x5f,0x37,0x36,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x31,0x35,0x36,0x20,0x2a,0x20,0x28,0x5f,0x38,0x36,
    0x20,0x2a,0x20,0x5f,0x31,0x38,0x38,0x29,0x20,0x2b,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x74,0x6f,0x74,0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,
    0x5f,0x38,0x36,0x20,0x2a,0x20,0x5f,0x31,0x38,0x38,0x20,0x2b,0x20,0x74,0x6f,0x74,
    0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x2b,0x2b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,0x69,0x6e,0x75,0x65,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x74,0x6f,0x74,0x61,0x6c,
    0x57,0x65,0x69,0x67,0x68,0x74,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x39,0x39,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2f,
    0x20,0x74,0x6f,0x74,0x61,0x6c,0x57,0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec2 pos;
    
    void main()
    {
        gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
    }
    
*/
static const char kuwahara_filter_vs_source_glsl300es[129] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x70,0x6f,0x73,0x20,0x2a,0x20,
    0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,
    0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D colorTexture;
    
    layout(location = 0) out highp vec4 fragColor;
    highp vec2 texSize;
    highp vec2 texCoord;
    int i;
    int j;
    int count;
    highp vec3 valueRatios;
    highp vec4 color;
    highp vec4 meanTemp;
    highp vec4 mean;
    highp float valueMean;
    highp float variance;
    highp float minVariance;
    highp float values[225];
    
    void findMean(int i0, int i1, int j0, int j1)
    {
        meanTemp = vec4(0.0);
        count = 0;
        i = i0;
        for (; i <= i1; i++)
        {
            j = j0;
            for (; j <= j1; j++)
            {
                color = texture(colorTexture, (gl_FragCoord.xy + vec2(float(i), float(j))) / texSize);
                meanTemp += color;
                values[count] = dot(color.xyz, valueRatios);
                count++;
            }
        }
        highp vec4 _115 = meanTemp;
        highp vec3 _118 = _115.xyz / vec3(float(count));
        meanTemp.x = _118.x;
        meanTemp.y = _118.y;
        meanTemp.z = _118.z;
        valueMean = dot(meanTemp.xyz, valueRatios);
        i = 0;
        for (; i < count; i++)
        {
            variance += pow(values[i] - valueMean, 2.0);
        }
        variance /= float(count);
        if ((variance < minVariance) || (minVariance <= (-1.0)))
        {
            mean = meanTemp;
            minVariance = variance;
        }
    }
    
    void main()
    {
        texSize = vec2(textureSize(colorTexture, 0));
        texCoord = gl_FragCoord.xy / texSize;
        i = 0;
        j = 0;
        count = 0;
        valueRatios = vec3(0.300000011920928955078125, 0.589999973773956298828125, 0.10999999940395355224609375);
        color = vec4(0.0);
        meanTemp = vec4(0.0);
        mean = vec4(0.0);
        valueMean = 0.0;
        variance = 0.0;
        minVariance = -1.0;
        fragColor = texture(colorTexture, texCoord);
        int param = -3;
        int param_1 = 0;
        int param_2 = -3;
        int param_3 = 0;
        findMean(param, param_1, param_2, param_3);
        int param_4 = 0;
        int param_5 = 3;
        int param_6 = 0;
        int param_7 = 3;
        findMean(param_4, param_5, param_6, param_7);
        int param_8 = -3;
        int param_9 = 0;
        int param_10 = 0;
        int param_11 = 3;
        findMean(param_8, param_9, param_10, param_11);
        int param_12 = 0;
        int param_13 = 3;
        int param_14 = -3;
        int param_15 = 0;
        findMean(param_12, param_13, param_14, param_15);
        fragColor.x = mean.x;
        fragColor.y = mean.y;
        fragColor.z = mean.z;
    }
    
*/
static const char kuwahara_filter_fs_source_glsl300es[2344] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x74,0x65,0x78,0x53,0x69,0x7a,0x65,0x3b,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x69,0x6e,
    0x74,0x20,0x69,0x3b,0x0a,0x69,0x6e,0x74,0x20,0x6a,0x3b,0x0a,0x69,0x6e,0x74,0x20,
    0x63,0x6f,0x75,0x6e,0x74,0x3b,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x61,0x6c,0x75,0x65,0x52,0x61,0x74,0x69,0x6f,0x73,0x3b,0x0a,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x65,0x61,0x6e,
    0x54,0x65,0x6d,0x70,0x3b,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x6d,0x65,0x61,0x6e,0x3b,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x4d,0x65,0x61,0x6e,0x3b,0x0a,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x61,0x72,0x69,0x61,0x6e,
    0x63,0x65,0x3b,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x6d,0x69,0x6e,0x56,0x61,0x72,0x69,0x61,0x6e,0x63,0x65,0x3b,0x0a,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x73,0x5b,
    0x32,0x32,0x35,0x5d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x69,0x6e,0x64,
    0x4d,0x65,0x61,0x6e,0x28,0x69,0x6e,0x74,0x20,0x69,0x30,0x2c,0x20,0x69,0x6e,0x74,
    0x20,0x69,0x31,0x2c,0x20,0x69,0x6e,0x74,0x20,0x6a,0x30,0x2c,0x20,0x69,0x6e,0x74,
    0x20,0x6a,0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x65,0x61,0x6e,0x54,
    0x65,0x6d,0x70,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x75,0x6e,0x74,0x20,0x3d,0x20,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x20,0x3d,0x20,0x69,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6f,0x72,0x20,0x28,0x3b,0x20,0x69,0x20,0x3c,0x3d,0x20,0x69,0x31,0x3b,0x20,
    0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6a,0x20,0x3d,0x20,0x6a,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x3b,0x20,0x6a,0x20,0x3c,0x3d,0x20,0x6a,
    0x31,0x3b,0x20,0x6a,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x28,0x67,0x6c,0x5f,
    0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,
    0x65,0x63,0x32,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x69,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x6a,0x29,0x29,0x29,0x20,0x2f,0x20,0x74,0x65,0x78,0x53,0x69,
    0x7a,0x65,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x6d,0x65,0x61,0x6e,0x54,0x65,0x6d,0x70,0x20,0x2b,0x3d,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x61,0x6c,0x75,0x65,0x73,0x5b,0x63,0x6f,0x75,0x6e,0x74,0x5d,0x20,0x3d,0x20,
    0x64,0x6f,0x74,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,
    0x61,0x6c,0x75,0x65,0x52,0x61,0x74,0x69,0x6f,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x75,0x6e,0x74,0x2b,0x2b,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x31,0x31,0x35,0x20,0x3d,0x20,0x6d,0x65,0x61,0x6e,0x54,0x65,0x6d,0x70,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x31,0x31,0x38,0x20,0x3d,0x20,0x5f,0x31,0x31,0x35,0x2e,0x78,0x79,0x7a,
    0x20,0x2f,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x63,0x6f,
    0x75,0x6e,0x74,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x65,0x61,0x6e,0x54,
    0x65,0x6d,0x70,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x31,0x31,0x38,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x65,0x61,0x6e,0x54,0x65,0x6d,0x70,0x2e,0x79,0x20,0x3d,
    0x20,0x5f,0x31,0x31,0x38,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x65,0x61,
    0x6e,0x54,0x65,0x6d,0x70,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,0x31,0x38,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x61,0x6c,0x75,0x65,0x4d,0x65,0x61,0x6e,0x20,
    0x3d,0x20,0x64,0x6f,0x74,0x28,0x6d,0x65,0x61,0x6e,0x54,0x65,0x6d,0x70,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x76,0x61,0x6c,0x75,0x65,0x52,0x61,0x74,0x69,0x6f,0x73,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6f,0x72,0x20,0x28,0x3b,0x20,0x69,0x20,0x3c,0x20,0x63,0x6f,0x75,0x6e,
    0x74,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x61,0x72,0x69,0x61,0x6e,0x63,0x65,0x20,0x2b,
    0x3d,0x20,0x70,0x6f,0x77,0x28,0x76,0x61,0x6c,0x75,0x65,0x73,0x5b,0x69,0x5d,0x20,
    0x2d,0x20,0x76,0x61,0x6c,0x75,0x65,0x4d,0x65,0x61,0x6e,0x2c,0x20,0x32,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x61,0x72,
    0x69,0x61,0x6e,0x63,0x65,0x20,0x2f,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x63,
    0x6f,0x75,0x6e,0x74,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,
    0x76,0x61,0x72,0x69,0x61,0x6e,0x63,0x65,0x20,0x3c,0x20,0x6d,0x69,0x6e,0x56,0x61,
    0x72,0x69,0x61,0x6e,0x63,0x65,0x29,0x20,0x7c,0x7c,0x20,0x28,0x6d,0x69,0x6e,0x56,
    0x61,0x72,0x69,0x61,0x6e,0x63,0x65,0x20,0x3c,0x3d,0x20,0x28,0x2d,0x31,0x2e,0x30,
    0x29,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x6d,0x65,0x61,0x6e,0x20,0x3d,0x20,0x6d,0x65,0x61,0x6e,0x54,0x65,0x6d,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x69,0x6e,0x56,0x61,
    0x72,0x69,0x61,0x6e,0x63,0x65,0x20,0x3d,0x20,0x76,0x61,0x72,0x69,0x61,0x6e,0x63,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,
    0x78,0x53,0x69,0x7a,0x65,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x54,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x46,0x72,
    0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x74,0x65,0x78,
    0x53,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6a,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x75,0x6e,0x74,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x61,0x6c,0x75,0x65,0x52,0x61,0x74,0x69,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,
    0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x35,0x38,0x39,0x39,0x39,0x39,0x39,0x37,0x33,0x37,0x37,0x33,0x39,0x35,0x36,0x32,
    0x39,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x30,0x39,0x39,
    0x39,0x39,0x39,0x39,0x39,0x34,0x30,0x33,0x39,0x35,0x33,0x35,0x35,0x32,0x32,0x34,
    0x36,0x30,0x39,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x65,0x61,0x6e,0x54,0x65,0x6d,0x70,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x65,
    0x61,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x61,0x6c,0x75,0x65,0x4d,0x65,0x61,0x6e,0x20,0x3d,0x20,
    0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x61,0x72,0x69,0x61,0x6e,0x63,
    0x65,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x69,0x6e,
    0x56,0x61,0x72,0x69,0x61,0x6e,0x63,0x65,0x20,0x3d,0x20,0x2d,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x54,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x2d,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x2d,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x69,0x6e,0x64,0x4d,0x65,
    0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x33,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x20,
    0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x69,
    0x6e,0x64,0x4d,0x65,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x2d,0x33,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x39,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x31,0x20,0x3d,0x20,
    0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x69,0x6e,0x64,0x4d,0x65,0x61,0x6e,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x39,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x32,0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x33,0x20,0x3d,0x20,
    0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x34,0x20,0x3d,0x20,0x2d,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x35,0x20,0x3d,0x20,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x69,0x6e,0x64,0x4d,0x65,0x61,0x6e,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x33,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x6d,0x65,0x61,0x6e,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x2e,0x79,0x20,
    0x3d,0x20,0x6d,0x65,0x61,0x6e,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x20,0x3d,0x20,0x6d,0x65,0x61,0x6e,
    0x2e,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before depth_blur.h"
#endif
static inline const sg_shader_desc* depth_blur_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.vs.source = depth_blur_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = depth_blur_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_23.kernelSize";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_23.scale";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_23.pnear";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_23.pfar";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "depth_blur_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* kuwahara_blur_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.vs.source = kuwahara_filter_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = kuwahara_filter_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "colorTexture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "kuwahara_blur_shader";
    }
    return &desc;
  }
  return 0;
}
