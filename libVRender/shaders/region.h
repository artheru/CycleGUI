#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input region.glsl --output region.h --slang glsl300es

    Overview:

        Shader program 'region3d':
            Get shader desc: region3d_shader_desc(sg_query_backend());
            Vertex shader: region3d_vs
                Attribute slots:
                    ATTR_region3d_vs_position = 0
            Fragment shader: region3d_fs
                Uniform block 'region3d_params':
                    C struct: region3d_params_t
                    Bind slot: SLOT_region3d_params = 0
                Image 'region_cache':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_UINT
                    Bind slot: SLOT_region_cache = 0
                Image 'depth_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_texture = 1


    Shader descriptor structs:

        sg_shader region3d = sg_make_shader(region3d_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'region3d_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_region3d_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_region_cache = 0;
        SLOT_depth_texture = 1;

    Bind slot and C-struct for uniform block 'region3d_params':

        region3d_params_t region3d_params = {
            .vm = ...;
            .pm = ...;
            .viewport_size = ...;
            .cam_pos = ...;
            .quantize = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_region3d_params, &SG_RANGE(region3d_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_region3d_vs_position (0)
#define SLOT_region_cache (0)
#define SLOT_depth_texture (1)
#define SLOT_region3d_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct region3d_params_t {
    glm::mat4 vm;
    glm::mat4 pm;
    glm::vec2 viewport_size;
    uint8_t _pad_136[8];
    glm::vec3 cam_pos;
    float quantize;
} region3d_params_t;
#pragma pack(pop)
/*
    #version 300 es
    
    layout(location = 0) in vec2 position;
    
    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
    }
    
*/
static const char region3d_vs_source_glsl300es[119] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 region3d_params[10];
    uniform highp usampler2D region_cache;
    uniform highp sampler2D depth_texture;
    
    layout(location = 0) out highp vec4 frag_color;
    
    int hash_index(ivec3 q)
    {
        return (((q.x * 73856093) ^ (q.y * 19349663)) ^ (q.z * 83492791)) & 2047;
    }
    
    bool voxel_exists(int tier, ivec3 cell, inout uvec4 voxel)
    {
        ivec3 param = cell;
        int _60 = hash_index(param);
        int _64 = tier * 8;
        for (int k = 0; k < 8; k++)
        {
            uvec4 _87 = texelFetch(region_cache, ivec2(_60, _64 + k), 0);
            uint _90 = _87.x;
            if (_90 == 2147483648u)
            {
                continue;
            }
            if (all(equal(ivec3(int(_90), int(_87.y), int(_87.z)), cell)))
            {
                voxel = _87;
                return true;
            }
        }
        return false;
    }
    
    highp float next_boundary_dt(highp vec3 p, highp vec3 dir, highp float s)
    {
        highp float _126 = floor(p.x / s);
        highp float _132 = floor(p.y / s);
        highp float _138 = floor(p.z / s);
        highp float _144;
        if (dir.x > 0.0)
        {
            _144 = (_126 + 1.0) * s;
        }
        else
        {
            _144 = _126 * s;
        }
        highp float _161;
        if (dir.y > 0.0)
        {
            _161 = (_132 + 1.0) * s;
        }
        else
        {
            _161 = _132 * s;
        }
        highp float _177;
        if (dir.z > 0.0)
        {
            _177 = (_138 + 1.0) * s;
        }
        else
        {
            _177 = _138 * s;
        }
        highp float _193;
        if (dir.x == 0.0)
        {
            _193 = 1000000015047466219876688855040.0;
        }
        else
        {
            _193 = (_144 - p.x) / dir.x;
        }
        highp float _210;
        if (dir.y == 0.0)
        {
            _210 = 1000000015047466219876688855040.0;
        }
        else
        {
            _210 = (_161 - p.y) / dir.y;
        }
        highp float _226;
        if (dir.z == 0.0)
        {
            _226 = 1000000015047466219876688855040.0;
        }
        else
        {
            _226 = (_177 - p.z) / dir.z;
        }
        return max(s * 9.9999997473787516355514526367188e-05 + min(_193, min(_210, _226)), 0.0);
    }
    
    void main()
    {
        highp vec2 _272 = ((gl_FragCoord.xy / region3d_params[8].xy) * 2.0) - vec2(1.0);
        highp mat4 _278 = inverse(mat4(region3d_params[4], region3d_params[5], region3d_params[6], region3d_params[7]));
        highp mat4 _282 = inverse(mat4(region3d_params[0], region3d_params[1], region3d_params[2], region3d_params[3]));
        highp float _291 = _272.x;
        highp vec4 _297 = _278 * vec4(_291, _272.y, 1.0, 1.0);
        highp vec3 _318 = normalize((_282 * vec4((_297 / vec4(_297.w)).xyz, 1.0)).xyz - region3d_params[9].xyz);
        highp vec4 _329 = texelFetch(depth_texture, ivec2(gl_FragCoord.xy), 0);
        highp float _330 = _329.x;
        highp float t1;
        if ((_330 > 0.0) && (_330 < 1.0))
        {
            highp vec4 _349 = _278 * vec4(_291, _272.y, _330 * 2.0 + (-1.0), 1.0);
            t1 = max(0.0, dot((_282 * vec4((_349 / vec4(_349.w)).xyz, 1.0)).xyz - region3d_params[9].xyz, _318));
        }
        else
        {
            t1 = 1000000.0;
        }
        if (t1 <= 0.0)
        {
            frag_color = vec4(0.0);
            return;
        }
        highp float _388 = max(region3d_params[9].w, 9.9999999747524270787835121154785e-07);
        highp vec3 colAccum = vec3(0.0);
        highp float trans = 1.0;
        highp float t = 0.0;
        uvec4 param_2;
        for (int _step = 0; ((_step < 4096) && (t < t1)) && (trans > 0.0199999995529651641845703125); _step++)
        {
            highp vec3 _415 = region3d_params[9].xyz + (_318 * t);
            uvec4 vox = uvec4(0u);
            int param = 0;
            ivec3 param_1 = ivec3(floor((_415 / vec3(_388)) + vec3(9.9999999747524270787835121154785e-07)));
            bool _431 = voxel_exists(param, param_1, param_2);
            vox = param_2;
            if (_431)
            {
                colAccum += (vec3(float(vox.w & 255u) * 0.0039215688593685626983642578125, float((vox.w >> uint(8)) & 255u) * 0.0039215688593685626983642578125, float((vox.w >> uint(16)) & 255u) * 0.0039215688593685626983642578125) * trans);
                trans = 0.0;
                break;
            }
            highp vec3 param_3 = _415;
            highp vec3 param_4 = _318;
            highp float param_5 = _388;
            highp float _481 = next_boundary_dt(param_3, param_4, param_5);
            if (_481 <= 0.0)
            {
                t = _388 * 9.9999997473787516355514526367188e-05 + t;
                continue;
            }
            t += _481;
        }
        frag_color = vec4(colAccum, clamp(1.0 - trans, 0.0, 1.0));
    }
    
*/
static const char region3d_fs_source_glsl300es[4400] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x30,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x72,0x65,0x67,0x69,0x6f,0x6e,0x5f,0x63,0x61,0x63,0x68,0x65,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x69,0x6e,0x74,0x20,0x68,0x61,0x73,0x68,0x5f,
    0x69,0x6e,0x64,0x65,0x78,0x28,0x69,0x76,0x65,0x63,0x33,0x20,0x71,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x28,0x71,
    0x2e,0x78,0x20,0x2a,0x20,0x37,0x33,0x38,0x35,0x36,0x30,0x39,0x33,0x29,0x20,0x5e,
    0x20,0x28,0x71,0x2e,0x79,0x20,0x2a,0x20,0x31,0x39,0x33,0x34,0x39,0x36,0x36,0x33,
    0x29,0x29,0x20,0x5e,0x20,0x28,0x71,0x2e,0x7a,0x20,0x2a,0x20,0x38,0x33,0x34,0x39,
    0x32,0x37,0x39,0x31,0x29,0x29,0x20,0x26,0x20,0x32,0x30,0x34,0x37,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x62,0x6f,0x6f,0x6c,0x20,0x76,0x6f,0x78,0x65,0x6c,0x5f,0x65,0x78,0x69,
    0x73,0x74,0x73,0x28,0x69,0x6e,0x74,0x20,0x74,0x69,0x65,0x72,0x2c,0x20,0x69,0x76,
    0x65,0x63,0x33,0x20,0x63,0x65,0x6c,0x6c,0x2c,0x20,0x69,0x6e,0x6f,0x75,0x74,0x20,
    0x75,0x76,0x65,0x63,0x34,0x20,0x76,0x6f,0x78,0x65,0x6c,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x63,0x65,0x6c,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x36,0x30,0x20,0x3d,0x20,0x68,0x61,0x73,0x68,0x5f,0x69,0x6e,0x64,0x65,0x78,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x5f,0x36,0x34,0x20,0x3d,0x20,0x74,0x69,0x65,0x72,0x20,0x2a,0x20,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x6b,0x20,0x3d,
    0x20,0x30,0x3b,0x20,0x6b,0x20,0x3c,0x20,0x38,0x3b,0x20,0x6b,0x2b,0x2b,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x75,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,
    0x65,0x74,0x63,0x68,0x28,0x72,0x65,0x67,0x69,0x6f,0x6e,0x5f,0x63,0x61,0x63,0x68,
    0x65,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x5f,0x36,0x30,0x2c,0x20,0x5f,0x36,
    0x34,0x20,0x2b,0x20,0x6b,0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x39,0x30,0x20,0x3d,0x20,0x5f,
    0x38,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x39,0x30,0x20,0x3d,0x3d,0x20,0x32,0x31,0x34,0x37,0x34,0x38,0x33,
    0x36,0x34,0x38,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6e,0x74,
    0x69,0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x61,0x6c,0x6c,0x28,
    0x65,0x71,0x75,0x61,0x6c,0x28,0x69,0x76,0x65,0x63,0x33,0x28,0x69,0x6e,0x74,0x28,
    0x5f,0x39,0x30,0x29,0x2c,0x20,0x69,0x6e,0x74,0x28,0x5f,0x38,0x37,0x2e,0x79,0x29,
    0x2c,0x20,0x69,0x6e,0x74,0x28,0x5f,0x38,0x37,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x63,
    0x65,0x6c,0x6c,0x29,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x6f,0x78,
    0x65,0x6c,0x20,0x3d,0x20,0x5f,0x38,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x74,0x72,0x75,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,
    0x6c,0x73,0x65,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x6e,0x65,0x78,0x74,0x5f,0x62,0x6f,0x75,0x6e,0x64,0x61,0x72,
    0x79,0x5f,0x64,0x74,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,
    0x72,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x36,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x6f,0x72,
    0x28,0x70,0x2e,0x78,0x20,0x2f,0x20,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x32,0x20,
    0x3d,0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x70,0x2e,0x79,0x20,0x2f,0x20,0x73,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x31,0x33,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x6f,0x72,0x28,0x70,
    0x2e,0x7a,0x20,0x2f,0x20,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x34,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x64,0x69,0x72,0x2e,0x78,0x20,0x3e,0x20,0x30,
    0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x5f,0x31,0x34,0x34,0x20,0x3d,0x20,0x28,0x5f,0x31,0x32,0x36,0x20,0x2b,
    0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,0x34,0x20,0x3d,0x20,0x5f,
    0x31,0x32,0x36,0x20,0x2a,0x20,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x36,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x64,0x69,0x72,
    0x2e,0x79,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x36,0x31,0x20,0x3d,0x20,0x28,
    0x5f,0x31,0x33,0x32,0x20,0x2b,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,
    0x36,0x31,0x20,0x3d,0x20,0x5f,0x31,0x33,0x32,0x20,0x2a,0x20,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x37,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x64,0x69,0x72,0x2e,0x7a,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,
    0x37,0x37,0x20,0x3d,0x20,0x28,0x5f,0x31,0x33,0x38,0x20,0x2b,0x20,0x31,0x2e,0x30,
    0x29,0x20,0x2a,0x20,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x31,0x37,0x37,0x20,0x3d,0x20,0x5f,0x31,0x33,0x38,0x20,
    0x2a,0x20,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x39,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x64,0x69,0x72,0x2e,0x78,0x20,0x3d,
    0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x39,0x33,0x20,0x3d,0x20,0x31,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x31,0x35,0x30,0x34,0x37,0x34,0x36,0x36,0x32,0x31,0x39,0x38,
    0x37,0x36,0x36,0x38,0x38,0x38,0x35,0x35,0x30,0x34,0x30,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x39,0x33,
    0x20,0x3d,0x20,0x28,0x5f,0x31,0x34,0x34,0x20,0x2d,0x20,0x70,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x64,0x69,0x72,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x32,0x31,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x64,0x69,0x72,
    0x2e,0x79,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x31,0x30,0x20,0x3d,0x20,
    0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x35,0x30,0x34,0x37,0x34,0x36,0x36,
    0x32,0x31,0x39,0x38,0x37,0x36,0x36,0x38,0x38,0x38,0x35,0x35,0x30,0x34,0x30,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x32,0x31,0x30,0x20,0x3d,0x20,0x28,0x5f,0x31,0x36,0x31,0x20,0x2d,0x20,0x70,
    0x2e,0x79,0x29,0x20,0x2f,0x20,0x64,0x69,0x72,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x64,0x69,0x72,0x2e,0x7a,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x32,
    0x36,0x20,0x3d,0x20,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x35,0x30,0x34,
    0x37,0x34,0x36,0x36,0x32,0x31,0x39,0x38,0x37,0x36,0x36,0x38,0x38,0x38,0x35,0x35,
    0x30,0x34,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x32,0x32,0x36,0x20,0x3d,0x20,0x28,0x5f,0x31,0x37,0x37,
    0x20,0x2d,0x20,0x70,0x2e,0x7a,0x29,0x20,0x2f,0x20,0x64,0x69,0x72,0x2e,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x6d,0x61,0x78,0x28,0x73,0x20,0x2a,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,
    0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,
    0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x20,
    0x2b,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x39,0x33,0x2c,0x20,0x6d,0x69,0x6e,0x28,
    0x5f,0x32,0x31,0x30,0x2c,0x20,0x5f,0x32,0x32,0x36,0x29,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x32,0x20,0x3d,0x20,0x28,0x28,0x67,0x6c,0x5f,
    0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x72,
    0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,
    0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,
    0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x37,0x38,0x20,0x3d,0x20,
    0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,0x6d,0x61,0x74,0x34,0x28,0x72,0x65,0x67,
    0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,
    0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x35,0x5d,0x2c,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,
    0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,
    0x38,0x32,0x20,0x3d,0x20,0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,0x6d,0x61,0x74,
    0x34,0x28,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2c,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,
    0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x72,0x65,
    0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x31,0x20,0x3d,0x20,0x5f,0x32,0x37,0x32,0x2e,
    0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x32,0x39,0x37,0x20,0x3d,0x20,0x5f,0x32,0x37,0x38,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x39,0x31,0x2c,0x20,0x5f,0x32,0x37,0x32,0x2e,
    0x79,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x31,
    0x38,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x5f,
    0x32,0x38,0x32,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x5f,0x32,0x39,0x37,
    0x20,0x2f,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x39,0x37,0x2e,0x77,0x29,0x29,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,
    0x2d,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x32,0x39,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x64,0x65,0x70,0x74,
    0x68,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,
    0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x33,0x30,0x20,0x3d,0x20,0x5f,0x33,
    0x32,0x39,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x74,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x28,0x5f,0x33,0x33,0x30,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x20,0x26,
    0x26,0x20,0x28,0x5f,0x33,0x33,0x30,0x20,0x3c,0x20,0x31,0x2e,0x30,0x29,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x34,0x39,0x20,0x3d,0x20,
    0x5f,0x32,0x37,0x38,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x39,0x31,
    0x2c,0x20,0x5f,0x32,0x37,0x32,0x2e,0x79,0x2c,0x20,0x5f,0x33,0x33,0x30,0x20,0x2a,
    0x20,0x32,0x2e,0x30,0x20,0x2b,0x20,0x28,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x31,0x20,
    0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x30,0x2c,0x20,0x64,0x6f,0x74,0x28,0x28,
    0x5f,0x32,0x38,0x32,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x5f,0x33,0x34,
    0x39,0x20,0x2f,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x33,0x34,0x39,0x2e,0x77,0x29,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x20,0x2d,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x33,0x31,0x38,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x74,0x31,0x20,0x3d,0x20,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x74,0x31,
    0x20,0x3c,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x38,0x38,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,
    0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x39,0x5d,0x2e,0x77,0x2c,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,
    0x34,0x37,0x35,0x32,0x34,0x32,0x37,0x30,0x37,0x38,0x37,0x38,0x33,0x35,0x31,0x32,
    0x31,0x31,0x35,0x34,0x37,0x38,0x35,0x65,0x2d,0x30,0x37,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,0x6c,
    0x41,0x63,0x63,0x75,0x6d,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x74,0x72,0x61,0x6e,0x73,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x74,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x65,
    0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x5f,0x73,0x74,0x65,0x70,0x20,0x3d,
    0x20,0x30,0x3b,0x20,0x28,0x28,0x5f,0x73,0x74,0x65,0x70,0x20,0x3c,0x20,0x34,0x30,
    0x39,0x36,0x29,0x20,0x26,0x26,0x20,0x28,0x74,0x20,0x3c,0x20,0x74,0x31,0x29,0x29,
    0x20,0x26,0x26,0x20,0x28,0x74,0x72,0x61,0x6e,0x73,0x20,0x3e,0x20,0x30,0x2e,0x30,
    0x31,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x35,0x35,0x32,0x39,0x36,0x35,0x31,0x36,
    0x34,0x31,0x38,0x34,0x35,0x37,0x30,0x33,0x31,0x32,0x35,0x29,0x3b,0x20,0x5f,0x73,
    0x74,0x65,0x70,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x34,0x31,0x35,0x20,0x3d,0x20,0x72,0x65,0x67,0x69,0x6f,0x6e,0x33,0x64,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,
    0x28,0x5f,0x33,0x31,0x38,0x20,0x2a,0x20,0x74,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x75,0x76,0x65,0x63,0x34,0x20,0x76,0x6f,0x78,0x20,0x3d,0x20,
    0x75,0x76,0x65,0x63,0x34,0x28,0x30,0x75,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x69,0x76,0x65,0x63,0x33,0x28,
    0x66,0x6c,0x6f,0x6f,0x72,0x28,0x28,0x5f,0x34,0x31,0x35,0x20,0x2f,0x20,0x76,0x65,
    0x63,0x33,0x28,0x5f,0x33,0x38,0x38,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,
    0x28,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,0x37,0x35,0x32,0x34,
    0x32,0x37,0x30,0x37,0x38,0x37,0x38,0x33,0x35,0x31,0x32,0x31,0x31,0x35,0x34,0x37,
    0x38,0x35,0x65,0x2d,0x30,0x37,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x34,0x33,0x31,0x20,0x3d,0x20,0x76,
    0x6f,0x78,0x65,0x6c,0x5f,0x65,0x78,0x69,0x73,0x74,0x73,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x6f,
    0x78,0x20,0x3d,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x34,0x33,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x41,0x63,0x63,0x75,0x6d,0x20,0x2b,0x3d,
    0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x76,0x6f,0x78,
    0x2e,0x77,0x20,0x26,0x20,0x32,0x35,0x35,0x75,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,
    0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,
    0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x76,0x6f,0x78,0x2e,0x77,0x20,0x3e,0x3e,0x20,
    0x75,0x69,0x6e,0x74,0x28,0x38,0x29,0x29,0x20,0x26,0x20,0x32,0x35,0x35,0x75,0x29,
    0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,
    0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,
    0x38,0x31,0x32,0x35,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x76,0x6f,0x78,
    0x2e,0x77,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x36,0x29,0x29,0x20,
    0x26,0x20,0x32,0x35,0x35,0x75,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x33,0x39,
    0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,
    0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x29,0x20,0x2a,0x20,0x74,
    0x72,0x61,0x6e,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x74,0x72,0x61,0x6e,0x73,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x34,0x31,0x35,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x33,0x31,
    0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,
    0x20,0x5f,0x33,0x38,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x38,0x31,0x20,
    0x3d,0x20,0x6e,0x65,0x78,0x74,0x5f,0x62,0x6f,0x75,0x6e,0x64,0x61,0x72,0x79,0x5f,
    0x64,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x34,0x38,0x31,0x20,
    0x3c,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x20,
    0x3d,0x20,0x5f,0x33,0x38,0x38,0x20,0x2a,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,
    0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,0x31,
    0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x20,0x2b,
    0x20,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6e,0x74,0x69,0x6e,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x20,0x2b,0x3d,
    0x20,0x5f,0x34,0x38,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x63,0x6f,0x6c,0x41,0x63,0x63,0x75,0x6d,0x2c,0x20,0x63,0x6c,0x61,
    0x6d,0x70,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x74,0x72,0x61,0x6e,0x73,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before region.h"
#endif
static inline const sg_shader_desc* region3d_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = region3d_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = region3d_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 160;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "region3d_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 10;
      desc.fs.images[0].name = "region_cache";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_UINT;
      desc.fs.images[1].name = "depth_texture";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "region3d_shader";
    }
    return &desc;
  }
  return 0;
}
