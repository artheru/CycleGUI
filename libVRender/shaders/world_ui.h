#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input world_ui.glsl --output world_ui.h --slang glsl300es

    Overview:

        Shader program 'handle_icon':
            Get shader desc: handle_icon_shader_desc(sg_query_backend());
            Vertex shader: handle_icon_vs
                Attribute slots:
                    ATTR_handle_icon_vs_position = 0
                    ATTR_handle_icon_vs_texcoord0 = 1
                    ATTR_handle_icon_vs_Iposition = 2
                    ATTR_handle_icon_vs_Itext_color = 3
                    ATTR_handle_icon_vs_Ihandle_color = 4
                Uniform block 'handle_icon_params_t':
                    C struct: handle_icon_params_t_t
                    Bind slot: SLOT_handle_icon_params_t = 0
            Fragment shader: handle_icon_fs
                Uniform block 'handle_icon_params_t':
                    C struct: handle_icon_params_t_t
                    Bind slot: SLOT_handle_icon_params_t = 0
                Image 'font_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_font_texture = 0
                Image 'depth_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_texture = 1

        Shader program 'text_along_line':
            Get shader desc: text_along_line_shader_desc(sg_query_backend());
            Vertex shader: text_along_line_vs
                Attribute slots:
                    ATTR_text_along_line_vs_position = 0
                    ATTR_text_along_line_vs_texcoord0 = 1
                    ATTR_text_along_line_vs_char_index = 2
                Uniform block 'text_along_line_params_t':
                    C struct: text_along_line_params_t_t
                    Bind slot: SLOT_text_along_line_params_t = 0
            Fragment shader: text_along_line_fs
                Uniform block 'text_along_line_params_t':
                    C struct: text_along_line_params_t_t
                    Bind slot: SLOT_text_along_line_params_t = 0
                Image 'font_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_font_texture = 0
                Image 'depth_texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_texture = 1


    Shader descriptor structs:

        sg_shader handle_icon = sg_make_shader(handle_icon_shader_desc(sg_query_backend()));
        sg_shader text_along_line = sg_make_shader(text_along_line_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'handle_icon_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_handle_icon_vs_position] = { ... },
                    [ATTR_handle_icon_vs_texcoord0] = { ... },
                    [ATTR_handle_icon_vs_Iposition] = { ... },
                    [ATTR_handle_icon_vs_Itext_color] = { ... },
                    [ATTR_handle_icon_vs_Ihandle_color] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'text_along_line_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_text_along_line_vs_position] = { ... },
                    [ATTR_text_along_line_vs_texcoord0] = { ... },
                    [ATTR_text_along_line_vs_char_index] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_font_texture = 0;
        SLOT_depth_texture = 1;

    Bind slot and C-struct for uniform block 'handle_icon_params_t':

        handle_icon_params_t_t handle_icon_params_t = {
            .mvp = ...;
            .dpi = ...;
            .screenW = ...;
            .screenH = ...;
            .behind_opacity = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_handle_icon_params_t, &SG_RANGE(handle_icon_params_t));

    Bind slot and C-struct for uniform block 'text_along_line_params_t':

        text_along_line_params_t_t text_along_line_params_t = {
            .mvp = ...;
            .dpi = ...;
            .text_id = ...;
            .screenW = ...;
            .screenH = ...;
            .behind_opacity = ...;
            .color = ...;
            .direction = ...;
            .vertical_alignment = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_text_along_line_params_t, &SG_RANGE(text_along_line_params_t));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_handle_icon_vs_position (0)
#define ATTR_handle_icon_vs_texcoord0 (1)
#define ATTR_handle_icon_vs_Iposition (2)
#define ATTR_handle_icon_vs_Itext_color (3)
#define ATTR_handle_icon_vs_Ihandle_color (4)
#define ATTR_text_along_line_vs_position (0)
#define ATTR_text_along_line_vs_texcoord0 (1)
#define ATTR_text_along_line_vs_char_index (2)
#define SLOT_font_texture (0)
#define SLOT_depth_texture (1)
#define SLOT_handle_icon_params_t (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct handle_icon_params_t_t {
    glm::mat4 mvp;
    float dpi;
    float screenW;
    float screenH;
    float behind_opacity;
} handle_icon_params_t_t;
#pragma pack(pop)
#define SLOT_text_along_line_params_t (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct text_along_line_params_t_t {
    glm::mat4 mvp;
    float dpi;
    int text_id;
    float screenW;
    float screenH;
    float behind_opacity;
    uint8_t _pad_84[12];
    glm::vec4 color;
    glm::vec3 direction;
    int vertical_alignment;
} text_along_line_params_t_t;
#pragma pack(pop)
/*
    #version 300 es
    
    uniform vec4 handle_icon_params_t[5];
    layout(location = 0) in vec3 position;
    layout(location = 2) in vec3 Iposition;
    out vec4 world_pos;
    out vec2 uv;
    layout(location = 1) in vec2 texcoord0;
    out vec4 text_color;
    layout(location = 3) in vec4 Itext_color;
    out vec4 handle_color;
    layout(location = 4) in vec4 Ihandle_color;
    
    void main()
    {
        world_pos = vec4(position + Iposition, 1.0);
        gl_Position = mat4(handle_icon_params_t[0], handle_icon_params_t[1], handle_icon_params_t[2], handle_icon_params_t[3]) * world_pos;
        uv = texcoord0;
        text_color = Itext_color;
        handle_color = Ihandle_color;
    }
    
*/
static const char handle_icon_vs_source_glsl300es[625] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x68,0x61,
    0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5f,0x74,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x49,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x77,
    0x6f,0x72,0x6c,0x64,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x78,0x74,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,
    0x20,0x49,0x74,0x65,0x78,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x49,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2b,0x20,
    0x49,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,
    0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x30,0x5d,0x2c,
    0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5f,0x74,0x5b,0x31,0x5d,0x2c,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,
    0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x32,
    0x5d,0x2c,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x77,0x6f,
    0x72,0x6c,0x64,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x74,0x65,0x78,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x49,0x74,
    0x65,0x78,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x61,0x6e,0x64,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x49,0x68,
    0x61,0x6e,0x64,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 handle_icon_params_t[5];
    uniform highp sampler2D font_texture;
    uniform highp sampler2D depth_texture;
    
    in highp vec2 uv;
    in highp vec4 world_pos;
    in highp vec4 handle_color;
    in highp vec4 text_color;
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec4 _21 = texture(font_texture, uv);
        highp vec4 _35 = mat4(handle_icon_params_t[0], handle_icon_params_t[1], handle_icon_params_t[2], handle_icon_params_t[3]) * world_pos;
        highp vec2 _63 = vec2(handle_icon_params_t[4].y, handle_icon_params_t[4].z);
        highp float _89;
        if (gl_FragCoord.z > texture(depth_texture, ((((_35.xyz / vec3(_35.w)).xy * 0.5) + vec2(0.5)) * _63) / _63).x)
        {
            _89 = handle_icon_params_t[4].w;
        }
        else
        {
            _89 = 1.0;
        }
        highp float _105 = step(0.5, _21.w);
        frag_color = vec4(mix(handle_color, text_color, vec4(_105)).xyz, mix(handle_color.w * 0.699999988079071044921875, text_color.w, _105) * _89);
        if (frag_color.w < 0.00999999977648258209228515625)
        {
            discard;
        }
    }
    
*/
static const char handle_icon_fs_source_glsl300es[1118] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x35,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x32,0x44,0x20,0x66,0x6f,0x6e,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x70,
    0x6f,0x73,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,
    0x78,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x66,0x6f,0x6e,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x30,0x5d,0x2c,0x20,0x68,0x61,0x6e,0x64,
    0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,
    0x5b,0x31,0x5d,0x2c,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x32,0x5d,0x2c,0x20,0x68,0x61,
    0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5f,0x74,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x70,
    0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x5f,0x36,0x33,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x68,0x61,
    0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5f,0x74,0x5b,0x34,0x5d,0x2e,0x79,0x2c,0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,
    0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x5b,0x34,0x5d,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x7a,
    0x20,0x3e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x65,0x70,0x74,0x68,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x28,0x28,0x28,0x28,0x5f,0x33,
    0x35,0x2e,0x78,0x79,0x7a,0x20,0x2f,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x33,0x35,
    0x2e,0x77,0x29,0x29,0x2e,0x78,0x79,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,
    0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x29,0x20,0x2a,0x20,0x5f,0x36,
    0x33,0x29,0x20,0x2f,0x20,0x5f,0x36,0x33,0x29,0x2e,0x78,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x39,0x20,0x3d,
    0x20,0x68,0x61,0x6e,0x64,0x6c,0x65,0x5f,0x69,0x63,0x6f,0x6e,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5f,0x74,0x5b,0x34,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x31,
    0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x30,0x35,0x20,0x3d,
    0x20,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x35,0x2c,0x20,0x5f,0x32,0x31,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,0x78,0x28,0x68,0x61,0x6e,
    0x64,0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x74,0x65,0x78,0x74,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x31,0x30,0x35,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6d,0x69,0x78,0x28,0x68,0x61,0x6e,0x64,
    0x6c,0x65,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x36,
    0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x30,0x37,0x39,0x30,0x37,0x31,0x30,0x34,
    0x34,0x39,0x32,0x31,0x38,0x37,0x35,0x2c,0x20,0x74,0x65,0x78,0x74,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x5f,0x31,0x30,0x35,0x29,0x20,0x2a,0x20,0x5f,
    0x38,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3c,0x20,0x30,0x2e,0x30,0x30,
    0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,0x35,0x38,0x32,
    0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    struct text_along_line_params_t
    {
        mat4 mvp;
        float dpi;
        int text_id;
        float screenW;
        float screenH;
        float behind_opacity;
        vec4 color;
        vec3 direction;
        int vertical_alignment;
    };
    
    uniform text_along_line_params_t _17;
    
    layout(location = 2) in float char_index;
    layout(location = 0) in vec3 position;
    out vec4 world_pos;
    out vec2 uv;
    layout(location = 1) in vec2 texcoord0;
    
    void main()
    {
        float vert_offset = 0.0;
        if (_17.vertical_alignment == 0)
        {
            vert_offset = 0.0500000007450580596923828125;
        }
        else
        {
            if (_17.vertical_alignment == 1)
            {
                vert_offset = 0.0;
            }
            else
            {
                if (_17.vertical_alignment == 2)
                {
                    vert_offset = -0.0500000007450580596923828125;
                }
            }
        }
        world_pos = vec4((position + ((normalize(_17.direction) * char_index) * 0.100000001490116119384765625)) + (normalize(cross(normalize(cross(_17.direction, vec3(0.0, 0.0, 1.0))), _17.direction)) * vert_offset), 1.0);
        gl_Position = _17.mvp * world_pos;
        uv = texcoord0;
    }
    
*/
static const char text_along_line_vs_source_glsl300es[1133] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x74,0x65,0x78,0x74,0x5f,0x61,0x6c,0x6f,
    0x6e,0x67,0x5f,0x6c,0x69,0x6e,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x76,0x70,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x70,0x69,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x74,0x5f,0x69,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x72,0x65,0x65,
    0x6e,0x57,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,
    0x72,0x65,0x65,0x6e,0x48,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x62,0x65,0x68,0x69,0x6e,0x64,0x5f,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x72,0x65,0x63,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,
    0x74,0x69,0x63,0x61,0x6c,0x5f,0x61,0x6c,0x69,0x67,0x6e,0x6d,0x65,0x6e,0x74,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x74,0x65,0x78,
    0x74,0x5f,0x61,0x6c,0x6f,0x6e,0x67,0x5f,0x6c,0x69,0x6e,0x65,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5f,0x74,0x20,0x5f,0x31,0x37,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,
    0x20,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x68,0x61,0x72,0x5f,0x69,
    0x6e,0x64,0x65,0x78,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x70,0x6f,0x73,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,
    0x65,0x72,0x74,0x5f,0x6f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x30,0x2e,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x37,0x2e,0x76,0x65,
    0x72,0x74,0x69,0x63,0x61,0x6c,0x5f,0x61,0x6c,0x69,0x67,0x6e,0x6d,0x65,0x6e,0x74,
    0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x20,0x3d,0x20,0x30,0x2e,0x30,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x34,
    0x35,0x30,0x35,0x38,0x30,0x35,0x39,0x36,0x39,0x32,0x33,0x38,0x32,0x38,0x31,0x32,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x37,0x2e,0x76,0x65,0x72,0x74,0x69,0x63,0x61,0x6c,
    0x5f,0x61,0x6c,0x69,0x67,0x6e,0x6d,0x65,0x6e,0x74,0x20,0x3d,0x3d,0x20,0x31,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x37,0x2e,0x76,
    0x65,0x72,0x74,0x69,0x63,0x61,0x6c,0x5f,0x61,0x6c,0x69,0x67,0x6e,0x6d,0x65,0x6e,
    0x74,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x3d,0x20,0x2d,0x30,0x2e,0x30,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
    0x37,0x34,0x35,0x30,0x35,0x38,0x30,0x35,0x39,0x36,0x39,0x32,0x33,0x38,0x32,0x38,
    0x31,0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x70,0x6f,0x73,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x2b,0x20,0x28,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x5f,0x31,0x37,0x2e,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,
    0x20,0x63,0x68,0x61,0x72,0x5f,0x69,0x6e,0x64,0x65,0x78,0x29,0x20,0x2a,0x20,0x30,
    0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,
    0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x29,0x20,0x2b,
    0x20,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x63,0x72,0x6f,0x73,
    0x73,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x63,0x72,0x6f,0x73,
    0x73,0x28,0x5f,0x31,0x37,0x2e,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x29,0x2c,0x20,0x5f,0x31,0x37,0x2e,0x64,0x69,0x72,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x5f,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x5f,0x31,0x37,0x2e,0x6d,0x76,0x70,0x20,0x2a,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,
    0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    struct text_along_line_params_t
    {
        highp mat4 mvp;
        highp float dpi;
        int text_id;
        highp float screenW;
        highp float screenH;
        highp float behind_opacity;
        highp vec4 color;
        highp vec3 direction;
        int vertical_alignment;
    };
    
    uniform text_along_line_params_t _28;
    
    uniform highp sampler2D font_texture;
    uniform highp sampler2D depth_texture;
    
    in highp vec2 uv;
    in highp vec4 world_pos;
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec4 _21 = texture(font_texture, uv);
        highp vec4 _36 = _28.mvp * world_pos;
        highp vec2 _63 = vec2(_28.screenW, _28.screenH);
        highp float _89;
        if (gl_FragCoord.z > texture(depth_texture, ((((_36.xyz / vec3(_36.w)).xy * 0.5) + vec2(0.5)) * _63) / _63).x)
        {
            _89 = _28.behind_opacity;
        }
        else
        {
            _89 = 1.0;
        }
        frag_color = vec4(_28.color.xyz, (_28.color.w * _21.w) * _89);
        if (frag_color.w < 0.00999999977648258209228515625)
        {
            discard;
        }
    }
    
*/
static const char text_along_line_fs_source_glsl300es[1061] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x74,0x65,0x78,0x74,0x5f,0x61,0x6c,0x6f,0x6e,0x67,
    0x5f,0x6c,0x69,0x6e,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x6d,0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x64,0x70,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x74,0x65,0x78,0x74,0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x72,0x65,0x65,
    0x6e,0x57,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x48,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x62,0x65,0x68,
    0x69,0x6e,0x64,0x5f,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x76,0x65,0x72,0x74,0x69,0x63,0x61,0x6c,0x5f,0x61,0x6c,
    0x69,0x67,0x6e,0x6d,0x65,0x6e,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x74,0x65,0x78,0x74,0x5f,0x61,0x6c,0x6f,0x6e,0x67,0x5f,
    0x6c,0x69,0x6e,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5f,0x74,0x20,0x5f,0x32,
    0x38,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x66,0x6f,0x6e,0x74,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,
    0x44,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,
    0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x66,0x6f,0x6e,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x36,0x20,0x3d,
    0x20,0x5f,0x32,0x38,0x2e,0x6d,0x76,0x70,0x20,0x2a,0x20,0x77,0x6f,0x72,0x6c,0x64,
    0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x5f,0x36,0x33,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,
    0x5f,0x32,0x38,0x2e,0x73,0x63,0x72,0x65,0x65,0x6e,0x57,0x2c,0x20,0x5f,0x32,0x38,
    0x2e,0x73,0x63,0x72,0x65,0x65,0x6e,0x48,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x39,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x20,0x3e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,
    0x28,0x28,0x28,0x28,0x5f,0x33,0x36,0x2e,0x78,0x79,0x7a,0x20,0x2f,0x20,0x76,0x65,
    0x63,0x33,0x28,0x5f,0x33,0x36,0x2e,0x77,0x29,0x29,0x2e,0x78,0x79,0x20,0x2a,0x20,
    0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,
    0x29,0x20,0x2a,0x20,0x5f,0x36,0x33,0x29,0x20,0x2f,0x20,0x5f,0x36,0x33,0x29,0x2e,
    0x78,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x5f,0x32,0x38,0x2e,0x62,0x65,0x68,0x69,0x6e,
    0x64,0x5f,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x31,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,
    0x32,0x38,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x28,0x5f,
    0x32,0x38,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2a,0x20,0x5f,0x32,0x31,
    0x2e,0x77,0x29,0x20,0x2a,0x20,0x5f,0x38,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,
    0x20,0x3c,0x20,0x30,0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,
    0x36,0x34,0x38,0x32,0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,
    0x32,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before world_ui.h"
#endif
static inline const sg_shader_desc* handle_icon_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texcoord0";
      desc.attrs[2].name = "Iposition";
      desc.attrs[3].name = "Itext_color";
      desc.attrs[4].name = "Ihandle_color";
      desc.vs.source = handle_icon_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 80;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "handle_icon_params_t";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 5;
      desc.fs.source = handle_icon_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 80;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "handle_icon_params_t";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 5;
      desc.fs.images[0].name = "font_texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "depth_texture";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "handle_icon_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* text_along_line_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "texcoord0";
      desc.attrs[2].name = "char_index";
      desc.vs.source = text_along_line_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "_17.mvp";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_MAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[1].name = "_17.dpi";
      desc.vs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
      desc.vs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[2].name = "_17.text_id";
      desc.vs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_INT;
      desc.vs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[3].name = "_17.screenW";
      desc.vs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
      desc.vs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[4].name = "_17.screenH";
      desc.vs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_FLOAT;
      desc.vs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[5].name = "_17.behind_opacity";
      desc.vs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_FLOAT;
      desc.vs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[6].name = "_17.color";
      desc.vs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[7].name = "_17.direction";
      desc.vs.uniform_blocks[0].uniforms[7].type = SG_UNIFORMTYPE_FLOAT3;
      desc.vs.uniform_blocks[0].uniforms[7].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[8].name = "_17.vertical_alignment";
      desc.vs.uniform_blocks[0].uniforms[8].type = SG_UNIFORMTYPE_INT;
      desc.vs.uniform_blocks[0].uniforms[8].array_count = 1;
      desc.fs.source = text_along_line_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 128;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_28.mvp";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_MAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_28.dpi";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_28.text_id";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_28.screenW";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_28.screenH";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[5].name = "_28.behind_opacity";
      desc.fs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[6].name = "_28.color";
      desc.fs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[7].name = "_28.direction";
      desc.fs.uniform_blocks[0].uniforms[7].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[7].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[8].name = "_28.vertical_alignment";
      desc.fs.uniform_blocks[0].uniforms[8].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[8].array_count = 1;
      desc.fs.images[0].name = "font_texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "depth_texture";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "text_along_line_shader";
    }
    return &desc;
  }
  return 0;
}
