#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input composer.glsl --output composer.h --slang glsl300es

    Overview:

        Shader program 'bloomDilateX':
            Get shader desc: bloomDilateX_shader_desc(sg_query_backend());
            Vertex shader: edl_composer_vs
                Attribute slots:
                    ATTR_edl_composer_vs_position = 0
            Fragment shader: bloom_dilateX
                Image 'shine1':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_shine1 = 0
                Image 'shine2':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_shine2 = 1

        Shader program 'bloomDilateY':
            Get shader desc: bloomDilateY_shader_desc(sg_query_backend());
            Vertex shader: edl_composer_vs
                Attribute slots:
                    ATTR_edl_composer_vs_position = 0
            Fragment shader: bloom_dilateY
                Image 'shine':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_shine = 0

        Shader program 'bloomblurX':
            Get shader desc: bloomblurX_shader_desc(sg_query_backend());
            Vertex shader: edl_composer_vs
                Attribute slots:
                    ATTR_edl_composer_vs_position = 0
            Fragment shader: bloom_blurX
                Image 'shine':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_shine = 0

        Shader program 'bloomblurYFin':
            Get shader desc: bloomblurYFin_shader_desc(sg_query_backend());
            Vertex shader: screen_composer_vs
                Attribute slots:
                    ATTR_screen_composer_vs_position = 0
            Fragment shader: bloom_blurY
                Image 'shine':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_shine = 0
                Image 'wboit_emissive':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_wboit_emissive = 1

        Shader program 'border_composer':
            Get shader desc: border_composer_shader_desc(sg_query_backend());
            Vertex shader: screen_composer_vs
                Attribute slots:
                    ATTR_screen_composer_vs_position = 0
            Fragment shader: ui_composer_fs
                Uniform block 'ui_composing':
                    C struct: ui_composing_t
                    Bind slot: SLOT_ui_composing = 0
                Image 'bordering':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_bordering = 0
                Image 'ui_selection':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_ui_selection = 1

        Shader program 'edl_composer':
            Get shader desc: edl_composer_shader_desc(sg_query_backend());
            Vertex shader: screen_composer_vs
                Attribute slots:
                    ATTR_screen_composer_vs_position = 0
            Fragment shader: edl_composer_fs
                Uniform block 'window':
                    C struct: window_t
                    Bind slot: SLOT_window = 0
                Image 'color_hi_res':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_color_hi_res = 0
                Image 'depth_hi_res':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_hi_res = 1
                Image 'depth_lo_res':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_lo_res = 2
                Image 'uDepth':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uDepth = 3
                Image 'ssao':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_ssao = 4
                Image 'wboit_composed':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_wboit_composed = 5


    Shader descriptor structs:

        sg_shader bloomDilateX = sg_make_shader(bloomDilateX_shader_desc(sg_query_backend()));
        sg_shader bloomDilateY = sg_make_shader(bloomDilateY_shader_desc(sg_query_backend()));
        sg_shader bloomblurX = sg_make_shader(bloomblurX_shader_desc(sg_query_backend()));
        sg_shader bloomblurYFin = sg_make_shader(bloomblurYFin_shader_desc(sg_query_backend()));
        sg_shader border_composer = sg_make_shader(border_composer_shader_desc(sg_query_backend()));
        sg_shader edl_composer = sg_make_shader(edl_composer_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'edl_composer_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_edl_composer_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'screen_composer_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_screen_composer_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_shine1 = 0;
        SLOT_shine2 = 1;
        SLOT_shine = 0;
        SLOT_wboit_emissive = 1;
        SLOT_bordering = 0;
        SLOT_ui_selection = 1;
        SLOT_color_hi_res = 0;
        SLOT_depth_hi_res = 1;
        SLOT_depth_lo_res = 2;
        SLOT_uDepth = 3;
        SLOT_ssao = 4;
        SLOT_wboit_composed = 5;

    Bind slot and C-struct for uniform block 'ui_composing':

        ui_composing_t ui_composing = {
            .draw_sel = ...;
            .border_colors = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_ui_composing, &SG_RANGE(ui_composing));

    Bind slot and C-struct for uniform block 'window':

        window_t window = {
            .w = ...;
            .h = ...;
            .pnear = ...;
            .pfar = ...;
            .ipmat = ...;
            .ivmat = ...;
            .pmat = ...;
            .pv = ...;
            .campos = ...;
            .lookdir = ...;
            .debugU = ...;
            .facFac = ...;
            .fac2Fac = ...;
            .fac2WFac = ...;
            .colorFac = ...;
            .reverse1 = ...;
            .reverse2 = ...;
            .edrefl = ...;
            .edlthres = ...;
            .useFlag = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_window, &SG_RANGE(window));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_edl_composer_vs_position (0)
#define ATTR_screen_composer_vs_position (0)
#define SLOT_shine1 (0)
#define SLOT_shine2 (1)
#define SLOT_shine (0)
#define SLOT_wboit_emissive (1)
#define SLOT_bordering (0)
#define SLOT_ui_selection (1)
#define SLOT_color_hi_res (0)
#define SLOT_depth_hi_res (1)
#define SLOT_depth_lo_res (2)
#define SLOT_uDepth (3)
#define SLOT_ssao (4)
#define SLOT_wboit_composed (5)
#define SLOT_ui_composing (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct ui_composing_t {
    float draw_sel;
    uint8_t _pad_4[12];
    float border_colors[3][4];
} ui_composing_t;
#pragma pack(pop)
#define SLOT_window (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct window_t {
    float w;
    float h;
    float pnear;
    float pfar;
    glm::mat4 ipmat;
    glm::mat4 ivmat;
    glm::mat4 pmat;
    glm::mat4 pv;
    glm::vec3 campos;
    uint8_t _pad_284[4];
    glm::vec3 lookdir;
    float debugU;
    float facFac;
    float fac2Fac;
    float fac2WFac;
    float colorFac;
    float reverse1;
    float reverse2;
    float edrefl;
    float edlthres;
    int useFlag;
    uint8_t _pad_340[12];
} window_t;
#pragma pack(pop)
/*
    #version 300 es
    
    layout(location = 0) in vec2 position;
    
    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
    }
    
*/
static const char edl_composer_vs_source_glsl300es[119] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D shine1;
    uniform highp sampler2D shine2;
    
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec4 bloom = vec4(0.0);
        for (int i = -3; i <= 3; i++)
        {
            ivec2 _45 = ivec2(ivec4(gl_FragCoord).xy) + ivec2(i, 0);
            bloom = max(bloom, (texelFetch(shine1, _45, 0) + (texelFetch(shine2, _45, 0) * 0.100000001490116119384765625)) - vec4(0.100000001490116119384765625 * float(abs(i))));
        }
        frag_color = bloom;
    }
    
*/
static const char bloom_dilateX_source_glsl300es[539] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,0x68,0x69,0x6e,0x65,0x31,0x3b,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,0x68,0x69,0x6e,0x65,0x32,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6c,
    0x6f,0x6f,0x6d,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,
    0x3d,0x20,0x2d,0x33,0x3b,0x20,0x69,0x20,0x3c,0x3d,0x20,0x33,0x3b,0x20,0x69,0x2b,
    0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x34,0x35,0x20,0x3d,0x20,0x69,0x76,0x65,
    0x63,0x32,0x28,0x69,0x76,0x65,0x63,0x34,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,
    0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x69,0x76,0x65,
    0x63,0x32,0x28,0x69,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x62,0x6c,0x6f,0x6f,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x62,0x6c,
    0x6f,0x6f,0x6d,0x2c,0x20,0x28,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,
    0x28,0x73,0x68,0x69,0x6e,0x65,0x31,0x2c,0x20,0x5f,0x34,0x35,0x2c,0x20,0x30,0x29,
    0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x73,
    0x68,0x69,0x6e,0x65,0x32,0x2c,0x20,0x5f,0x34,0x35,0x2c,0x20,0x30,0x29,0x20,0x2a,
    0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,
    0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x29,
    0x20,0x2d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,
    0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,
    0x36,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x61,0x62,
    0x73,0x28,0x69,0x29,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x62,0x6c,0x6f,0x6f,0x6d,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D shine;
    
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec4 bloom = vec4(0.0);
        for (int i = -3; i <= 3; i++)
        {
            bloom = max(bloom, texelFetch(shine, ivec2(ivec4(gl_FragCoord).xy) + ivec2(0, i), 0) - vec4(0.100000001490116119384765625 * float(abs(i))));
        }
        frag_color = bloom;
        frag_color = vec4(bloom.xyz, 0.5);
    }
    
*/
static const char bloom_dilateY_source_glsl300es[454] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,0x68,0x69,0x6e,0x65,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6c,0x6f,
    0x6f,0x6d,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,
    0x20,0x2d,0x33,0x3b,0x20,0x69,0x20,0x3c,0x3d,0x20,0x33,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x62,0x6c,0x6f,0x6f,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x62,0x6c,0x6f,0x6f,
    0x6d,0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x73,0x68,
    0x69,0x6e,0x65,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x69,0x76,0x65,0x63,0x34,
    0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,
    0x79,0x29,0x20,0x2b,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x69,0x29,
    0x2c,0x20,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x31,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,
    0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x61,0x62,0x73,0x28,0x69,0x29,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x62,0x6c,0x6f,0x6f,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x62,0x6c,0x6f,0x6f,0x6d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x30,0x2e,0x35,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D shine;
    
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec4 bloom = vec4(0.0);
        for (int i = -5; i <= 5; i++)
        {
            bloom += texelFetch(shine, ivec2(ivec4(gl_FragCoord).xy) + ivec2(i, 0), 0);
        }
        frag_color = bloom * vec4(0.0909090936183929443359375);
    }
    
*/
static const char bloom_blurX_source_glsl300es[386] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,0x68,0x69,0x6e,0x65,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6c,0x6f,
    0x6f,0x6d,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,
    0x20,0x2d,0x35,0x3b,0x20,0x69,0x20,0x3c,0x3d,0x20,0x35,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x62,0x6c,0x6f,0x6f,0x6d,0x20,0x2b,0x3d,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,
    0x74,0x63,0x68,0x28,0x73,0x68,0x69,0x6e,0x65,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,
    0x28,0x69,0x76,0x65,0x63,0x34,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x29,0x2e,0x78,0x79,0x29,0x20,0x2b,0x20,0x69,0x76,0x65,0x63,0x32,
    0x28,0x69,0x2c,0x20,0x30,0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x62,0x6c,0x6f,0x6f,0x6d,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,
    0x30,0x2e,0x30,0x39,0x30,0x39,0x30,0x39,0x30,0x39,0x33,0x36,0x31,0x38,0x33,0x39,
    0x32,0x39,0x34,0x34,0x33,0x33,0x35,0x39,0x33,0x37,0x35,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec2 position;
    out vec2 uv;
    
    void main()
    {
        gl_Position = vec4(position, 0.0, 1.0);
        uv = (position * 0.5) + vec2(0.5);
    }
    
*/
static const char screen_composer_vs_source_glsl300es[171] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,
    0x28,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D shine;
    uniform highp sampler2D wboit_emissive;
    
    in highp vec2 uv;
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec4 bloom = vec4(0.0);
        highp float _29 = float(textureSize(shine, 0).y);
        for (int i = -5; i <= 5; i++)
        {
            bloom += texture(shine, uv + (vec2(0.0, float(i)) / vec2(_29)), 0.0);
        }
        frag_color = bloom * vec4(0.0909090936183929443359375);
        frag_color += texture(wboit_emissive, uv);
    }
    
*/
static const char bloom_blurY_source_glsl300es[539] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,0x68,0x69,0x6e,0x65,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x77,0x62,0x6f,0x69,0x74,0x5f,0x65,0x6d,0x69,0x73,
    0x73,0x69,0x76,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6c,0x6f,0x6f,0x6d,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,
    0x65,0x28,0x73,0x68,0x69,0x6e,0x65,0x2c,0x20,0x30,0x29,0x2e,0x79,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,
    0x20,0x2d,0x35,0x3b,0x20,0x69,0x20,0x3c,0x3d,0x20,0x35,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x62,0x6c,0x6f,0x6f,0x6d,0x20,0x2b,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x73,0x68,0x69,0x6e,0x65,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x76,0x65,
    0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x69,0x29,
    0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x32,0x39,0x29,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x62,0x6c,0x6f,
    0x6f,0x6d,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x39,0x30,0x39,
    0x30,0x39,0x30,0x39,0x33,0x36,0x31,0x38,0x33,0x39,0x32,0x39,0x34,0x34,0x33,0x33,
    0x35,0x39,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2b,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x77,0x62,0x6f,0x69,0x74,0x5f,0x65,0x6d,0x69,0x73,0x73,0x69,0x76,0x65,
    0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 ui_composing[4];
    uniform highp sampler2D bordering;
    uniform highp sampler2D ui_selection;
    
    in highp vec2 uv;
    layout(location = 0) out highp vec4 frag_color;
    
    void main()
    {
        highp vec2 offsets[8];
        offsets[0] = vec2(-1.0);
        offsets[1] = vec2(0.0, -1.0);
        offsets[2] = vec2(1.0, -1.0);
        offsets[3] = vec2(-1.0, 0.0);
        offsets[4] = vec2(1.0, 0.0);
        offsets[5] = vec2(-1.0, 1.0);
        offsets[6] = vec2(0.0, 1.0);
        offsets[7] = vec2(1.0);
        highp vec2 _53 = vec2(textureSize(bordering, 0));
        highp float border = 0.0;
        int center = int(texture(bordering, uv).x * 255.0) & 15;
        highp vec3 border_color = vec3(0.0);
        for (int i = 0; i < 8; i++)
        {
            highp vec4 _96 = texture(bordering, uv + (offsets[i] / _53));
            int _100 = int(_96.x * 255.0) & 15;
            if (_100 > center)
            {
                border = 1.0;
                center = _100;
                border_color = ui_composing[((_100 * 16) - 1) * 1 + 1].xyz;
            }
        }
        frag_color = vec4(border_color, 0.660000026226043701171875) * border;
        highp vec2 _141 = gl_FragCoord.xy / vec2(textureSize(bordering, 0));
        _141.y = 1.0 - _141.y;
        if (ui_composing[0].x > 0.0)
        {
            frag_color += vec4(1.0, 0.300000011920928955078125, 0.0, 0.5 * texture(ui_selection, _141).x);
        }
    }
    
*/
static const char ui_composer_fs_source_glsl300es[1382] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x75,0x69,0x5f,0x63,0x6f,0x6d,0x70,0x6f,0x73,0x69,0x6e,0x67,0x5b,0x34,
    0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x62,0x6f,0x72,0x64,0x65,
    0x72,0x69,0x6e,0x67,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x69,
    0x5f,0x73,0x65,0x6c,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x69,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x73,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x73,0x5b,0x31,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x73,0x5b,0x32,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,
    0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x73,0x5b,0x33,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,
    0x2d,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x34,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x35,0x5d,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x36,0x5d,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x37,0x5d,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x35,0x33,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,
    0x65,0x28,0x62,0x6f,0x72,0x64,0x65,0x72,0x69,0x6e,0x67,0x2c,0x20,0x30,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x62,0x6f,0x72,0x64,0x65,0x72,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x20,0x3d,
    0x20,0x69,0x6e,0x74,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x62,0x6f,0x72,
    0x64,0x65,0x72,0x69,0x6e,0x67,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x20,0x2a,0x20,
    0x32,0x35,0x35,0x2e,0x30,0x29,0x20,0x26,0x20,0x31,0x35,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x62,0x6f,0x72,0x64,
    0x65,0x72,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,
    0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x38,0x3b,
    0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x39,0x36,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x62,0x6f,0x72,
    0x64,0x65,0x72,0x69,0x6e,0x67,0x2c,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x73,0x5b,0x69,0x5d,0x20,0x2f,0x20,0x5f,0x35,0x33,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,
    0x30,0x30,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x39,0x36,0x2e,0x78,0x20,0x2a,
    0x20,0x32,0x35,0x35,0x2e,0x30,0x29,0x20,0x26,0x20,0x31,0x35,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,0x30,0x20,0x3e,
    0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,
    0x6f,0x72,0x64,0x65,0x72,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x20,
    0x3d,0x20,0x5f,0x31,0x30,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x72,0x64,0x65,0x72,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x75,0x69,0x5f,0x63,0x6f,0x6d,0x70,0x6f,0x73,0x69,0x6e,0x67,0x5b,
    0x28,0x28,0x5f,0x31,0x30,0x30,0x20,0x2a,0x20,0x31,0x36,0x29,0x20,0x2d,0x20,0x31,
    0x29,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x34,0x28,0x62,0x6f,0x72,0x64,0x65,0x72,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2c,0x20,0x30,0x2e,0x36,0x36,0x30,0x30,0x30,0x30,0x30,0x32,0x36,0x32,
    0x32,0x36,0x30,0x34,0x33,0x37,0x30,0x31,0x31,0x37,0x31,0x38,0x37,0x35,0x29,0x20,
    0x2a,0x20,0x62,0x6f,0x72,0x64,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,
    0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,
    0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,
    0x7a,0x65,0x28,0x62,0x6f,0x72,0x64,0x65,0x72,0x69,0x6e,0x67,0x2c,0x20,0x30,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,0x31,0x2e,0x79,0x20,0x3d,0x20,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x31,0x34,0x31,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x75,0x69,0x5f,0x63,0x6f,0x6d,0x70,0x6f,0x73,0x69,
    0x6e,0x67,0x5b,0x30,0x5d,0x2e,0x78,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2b,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,
    0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x35,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x69,0x5f,0x73,0x65,0x6c,0x65,0x63,0x74,0x69,0x6f,0x6e,
    0x2c,0x20,0x5f,0x31,0x34,0x31,0x29,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    struct window
    {
        highp float w;
        highp float h;
        highp float pnear;
        highp float pfar;
        highp mat4 ipmat;
        highp mat4 ivmat;
        highp mat4 pmat;
        highp mat4 pv;
        highp vec3 campos;
        highp vec3 lookdir;
        highp float debugU;
        highp float facFac;
        highp float fac2Fac;
        highp float fac2WFac;
        highp float colorFac;
        highp float reverse1;
        highp float reverse2;
        highp float edrefl;
        highp float edlthres;
        int useFlag;
    };
    
    uniform window _27;
    
    uniform highp sampler2D color_hi_res;
    uniform highp sampler2D depth_hi_res;
    uniform highp sampler2D depth_lo_res;
    uniform highp sampler2D uDepth;
    uniform highp sampler2D ssao;
    uniform highp sampler2D wboit_composed;
    
    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 uv;
    
    highp float getld(highp float d)
    {
        return ((2.0 * _27.pnear) * _27.pfar) / ((-(d * 2.0 + (-1.0))) * (_27.pfar - _27.pnear) + (_27.pfar + _27.pnear));
    }
    
    void main()
    {
        frag_color = texture(color_hi_res, uv);
        highp vec2 _100 = vec2(1.0) / vec2(textureSize(depth_hi_res, 0));
        highp vec2 _107 = vec2(1.0) / vec2(textureSize(depth_lo_res, 0));
        highp vec2 offsets[8];
        offsets[0] = vec2(-1.0);
        offsets[1] = vec2(0.0, -1.0);
        offsets[2] = vec2(1.0, -1.0);
        offsets[3] = vec2(-1.0, 0.0);
        offsets[4] = vec2(1.0, 0.0);
        offsets[5] = vec2(-1.0, 1.0);
        offsets[6] = vec2(0.0, 1.0);
        offsets[7] = vec2(1.0);
        highp vec4 _135 = texture(depth_lo_res, uv);
        highp float _136 = _135.x;
        highp float dmax = _136;
        highp float dmin = _136;
        highp float param = _136;
        highp float _144 = getld(param);
        for (int i = 0; i < 8; i++)
        {
            highp vec4 _165 = texture(depth_lo_res, offsets[i] * _107 + uv);
            highp float _166 = _165.x;
            bool _168 = _166 < 1.0;
            bool _179;
            if (_168)
            {
                highp float param_1 = _166;
                _179 = abs(getld(param_1) - _144) < 0.100000001490116119384765625;
            }
            else
            {
                _179 = _168;
            }
            if (_179)
            {
                dmax = max(_166, dmax);
                dmin = min(_166, dmin);
            }
        }
        highp float param_2 = dmax;
        dmax = getld(param_2);
        highp float param_3 = dmin;
        highp float _195 = getld(param_3);
        dmin = _195;
        highp float fac = max(0.0, 0.4000000059604644775390625 / (pow(abs(dmax - _195), 0.800000011920928955078125) + 0.4000000059604644775390625));
        highp float dhmin = 1.0;
        for (int i_1 = 0; i_1 < 8; i_1++)
        {
            highp vec4 _230 = texture(depth_hi_res, offsets[i_1] * _100 + uv);
            highp float _231 = _230.x;
            if ((_231 > 0.0) && (_231 < 1.0))
            {
                dhmin = min(_231, dhmin);
            }
        }
        highp vec4 _247 = texture(depth_hi_res, uv);
        highp float _248 = _247.x;
        highp float param_4 = _248;
        highp float _252 = getld(param_4);
        highp float param_5 = dhmin;
        highp float _255 = getld(param_5);
        dhmin = _255;
        highp float facb = 1.0;
        if (_255 < _252)
        {
            facb = (1.0 - min((_252 - dhmin) * 2.2000000476837158203125, 1.0)) * 0.60000002384185791015625 + 0.4000000059604644775390625;
        }
        highp float _276 = min(fac, facb);
        highp float _282 = _276 - _27.reverse1;
        fac = _27.edrefl * exp((-(_282 * _282)) / (_27.reverse2 + 9.9999997473787516355514526367188e-06)) + _276;
        highp vec4 _304 = texture(uDepth, uv);
        highp float _305 = _304.x;
        if ((_305 < _248) || (!((_27.useFlag & 1) != int(0u))))
        {
            fac = 1.0;
        }
        highp float _315 = fac;
        highp float _317 = 0.800000011920928955078125 * _315 + 0.20000000298023223876953125;
        fac = _317;
        highp float _321 = frag_color.x;
        highp float _324 = frag_color.y;
        highp float _327 = frag_color.z;
        highp float _329 = max(_321, max(_324, _327));
        frag_color = vec4((((frag_color.xyz * _317) * _27.facFac) + vec3(((pow(_317, _27.fac2Fac) - 1.0) * _329) * _27.fac2WFac)) + (frag_color.xyz * _27.colorFac), frag_color.w);
        highp float darken = (texture(ssao, uv).x * _329) * 0.89999997615814208984375;
        if (_305 == _248)
        {
            darken *= 0.5;
        }
        if (!((_27.useFlag & 2) != int(0u)))
        {
            darken = 0.0;
        }
        frag_color = vec4(frag_color.xyz - vec3(darken), frag_color.w);
        if ((_27.useFlag & 8) != 0)
        {
            highp vec4 _412 = texture(wboit_composed, uv);
            highp float _417 = _412.w;
            highp float _418 = 1.0 - _417;
            frag_color.w = (frag_color.w - 1.0) * _418 + 1.0;
            highp vec4 _422 = frag_color;
            highp vec3 _433 = (_422.xyz * _418) + (_412.xyz * _417);
            frag_color.x = _433.x;
            frag_color.y = _433.y;
            frag_color.z = _433.z;
        }
    }
    
*/
static const char edl_composer_fs_source_glsl300es[4780] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x77,0x69,0x6e,0x64,0x6f,0x77,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x77,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x68,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x6e,0x65,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x66,0x61,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x69,0x70,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x6d,0x61,0x74,0x34,0x20,0x69,0x76,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x6d,0x61,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x6d,0x61,0x74,
    0x34,0x20,0x70,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x6f,0x6f,0x6b,
    0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x62,0x75,0x67,0x55,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x61,0x63,
    0x46,0x61,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x66,0x61,0x63,0x32,0x46,0x61,0x63,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x61,
    0x63,0x32,0x57,0x46,0x61,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x46,0x61,0x63,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x72,0x65,0x76,0x65,0x72,0x73,0x65,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x65,0x76,0x65,
    0x72,0x73,0x65,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x65,0x64,0x72,0x65,0x66,0x6c,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x65,0x64,
    0x6c,0x74,0x68,0x72,0x65,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x75,0x73,0x65,0x46,0x6c,0x61,0x67,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x77,0x69,0x6e,0x64,0x6f,0x77,0x20,0x5f,0x32,0x37,0x3b,
    0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x68,0x69,0x5f,0x72,0x65,0x73,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,
    0x65,0x73,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x44,0x65,0x70,
    0x74,0x68,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,0x73,0x61,0x6f,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x77,0x62,0x6f,0x69,0x74,0x5f,
    0x63,0x6f,0x6d,0x70,0x6f,0x73,0x65,0x64,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x32,0x2e,
    0x30,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x70,0x6e,0x65,0x61,0x72,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x37,0x2e,0x70,0x66,0x61,0x72,0x29,0x20,0x2f,0x20,0x28,0x28,0x2d,
    0x28,0x64,0x20,0x2a,0x20,0x32,0x2e,0x30,0x20,0x2b,0x20,0x28,0x2d,0x31,0x2e,0x30,
    0x29,0x29,0x29,0x20,0x2a,0x20,0x28,0x5f,0x32,0x37,0x2e,0x70,0x66,0x61,0x72,0x20,
    0x2d,0x20,0x5f,0x32,0x37,0x2e,0x70,0x6e,0x65,0x61,0x72,0x29,0x20,0x2b,0x20,0x28,
    0x5f,0x32,0x37,0x2e,0x70,0x66,0x61,0x72,0x20,0x2b,0x20,0x5f,0x32,0x37,0x2e,0x70,
    0x6e,0x65,0x61,0x72,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x2c,0x20,
    0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x30,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x68,0x69,
    0x5f,0x72,0x65,0x73,0x2c,0x20,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,
    0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x64,0x65,
    0x70,0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,0x65,0x73,0x2c,0x20,0x30,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x32,0x28,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x73,0x5b,0x31,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x32,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,
    0x28,0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x33,0x5d,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x34,0x5d,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x35,0x5d,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x36,0x5d,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x37,
    0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,
    0x33,0x35,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,0x65,0x73,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x33,0x36,0x20,0x3d,0x20,0x5f,0x31,0x33,0x35,0x2e,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,
    0x6d,0x61,0x78,0x20,0x3d,0x20,0x5f,0x31,0x33,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x6d,0x69,0x6e,
    0x20,0x3d,0x20,0x5f,0x31,0x33,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x5f,0x31,0x33,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x34,0x20,0x3d,0x20,0x67,0x65,
    0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,
    0x69,0x20,0x3c,0x20,0x38,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,0x35,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,0x65,0x73,
    0x2c,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,0x5b,0x69,0x5d,0x20,0x2a,0x20,0x5f,
    0x31,0x30,0x37,0x20,0x2b,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x36,0x36,0x20,0x3d,0x20,0x5f,0x31,0x36,0x35,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x36,0x38,0x20,
    0x3d,0x20,0x5f,0x31,0x36,0x36,0x20,0x3c,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x37,0x39,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,
    0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,
    0x31,0x36,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x31,0x37,0x39,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x67,0x65,0x74,0x6c,
    0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x20,0x2d,0x20,0x5f,0x31,0x34,
    0x34,0x29,0x20,0x3c,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,
    0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,
    0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x31,0x37,0x39,0x20,0x3d,0x20,0x5f,0x31,0x36,0x38,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x37,0x39,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x64,0x6d,0x61,0x78,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x5f,0x31,0x36,0x36,0x2c,
    0x20,0x64,0x6d,0x61,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x64,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x6d,0x69,0x6e,0x28,0x5f,
    0x31,0x36,0x36,0x2c,0x20,0x64,0x6d,0x69,0x6e,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x20,0x3d,0x20,0x64,0x6d,0x61,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x64,0x6d,0x61,0x78,0x20,0x3d,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,
    0x20,0x64,0x6d,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x39,0x35,0x20,0x3d,0x20,0x67,0x65,
    0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x64,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x5f,0x31,0x39,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,
    0x61,0x63,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,
    0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x20,0x2f,0x20,0x28,0x70,0x6f,0x77,
    0x28,0x61,0x62,0x73,0x28,0x64,0x6d,0x61,0x78,0x20,0x2d,0x20,0x5f,0x31,0x39,0x35,
    0x29,0x2c,0x20,0x30,0x2e,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,
    0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x29,0x20,0x2b,
    0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,
    0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x64,0x68,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x5f,0x31,0x20,0x3d,0x20,
    0x30,0x3b,0x20,0x69,0x5f,0x31,0x20,0x3c,0x20,0x38,0x3b,0x20,0x69,0x5f,0x31,0x2b,
    0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x33,0x30,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x65,0x70,0x74,0x68,
    0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x2c,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x73,
    0x5b,0x69,0x5f,0x31,0x5d,0x20,0x2a,0x20,0x5f,0x31,0x30,0x30,0x20,0x2b,0x20,0x75,
    0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x33,0x31,0x20,0x3d,0x20,0x5f,
    0x32,0x33,0x30,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x28,0x5f,0x32,0x33,0x31,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x20,
    0x26,0x26,0x20,0x28,0x5f,0x32,0x33,0x31,0x20,0x3c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x68,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x6d,
    0x69,0x6e,0x28,0x5f,0x32,0x33,0x31,0x2c,0x20,0x64,0x68,0x6d,0x69,0x6e,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x32,0x34,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,
    0x65,0x70,0x74,0x68,0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x2c,0x20,0x75,0x76,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x32,0x34,0x38,0x20,0x3d,0x20,0x5f,0x32,0x34,0x37,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,0x32,0x34,0x38,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x32,0x35,0x32,0x20,0x3d,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,
    0x3d,0x20,0x64,0x68,0x6d,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x35,0x35,0x20,0x3d,0x20,
    0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x64,0x68,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x35,0x35,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x66,0x61,0x63,0x62,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x35,0x35,0x20,0x3c,0x20,0x5f,0x32,0x35,
    0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x61,0x63,0x62,0x20,0x3d,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x6d,
    0x69,0x6e,0x28,0x28,0x5f,0x32,0x35,0x32,0x20,0x2d,0x20,0x64,0x68,0x6d,0x69,0x6e,
    0x29,0x20,0x2a,0x20,0x32,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x36,
    0x38,0x33,0x37,0x31,0x35,0x38,0x32,0x30,0x33,0x31,0x32,0x35,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x32,
    0x33,0x38,0x34,0x31,0x38,0x35,0x37,0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x20,
    0x2b,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,
    0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x37,0x36,0x20,0x3d,0x20,0x6d,0x69,0x6e,0x28,
    0x66,0x61,0x63,0x2c,0x20,0x66,0x61,0x63,0x62,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x38,0x32,
    0x20,0x3d,0x20,0x5f,0x32,0x37,0x36,0x20,0x2d,0x20,0x5f,0x32,0x37,0x2e,0x72,0x65,
    0x76,0x65,0x72,0x73,0x65,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x61,0x63,0x20,
    0x3d,0x20,0x5f,0x32,0x37,0x2e,0x65,0x64,0x72,0x65,0x66,0x6c,0x20,0x2a,0x20,0x65,
    0x78,0x70,0x28,0x28,0x2d,0x28,0x5f,0x32,0x38,0x32,0x20,0x2a,0x20,0x5f,0x32,0x38,
    0x32,0x29,0x29,0x20,0x2f,0x20,0x28,0x5f,0x32,0x37,0x2e,0x72,0x65,0x76,0x65,0x72,
    0x73,0x65,0x32,0x20,0x2b,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,
    0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,0x35,0x32,
    0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x36,0x29,0x29,0x20,0x2b,0x20,
    0x5f,0x32,0x37,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x30,0x34,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x44,0x65,0x70,0x74,0x68,0x2c,0x20,0x75,0x76,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x33,0x30,0x35,0x20,0x3d,0x20,0x5f,0x33,0x30,0x34,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x5f,0x33,0x30,0x35,0x20,0x3c,0x20,
    0x5f,0x32,0x34,0x38,0x29,0x20,0x7c,0x7c,0x20,0x28,0x21,0x28,0x28,0x5f,0x32,0x37,
    0x2e,0x75,0x73,0x65,0x46,0x6c,0x61,0x67,0x20,0x26,0x20,0x31,0x29,0x20,0x21,0x3d,
    0x20,0x69,0x6e,0x74,0x28,0x30,0x75,0x29,0x29,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x61,0x63,0x20,0x3d,0x20,
    0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x31,0x35,0x20,
    0x3d,0x20,0x66,0x61,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x31,0x37,0x20,0x3d,0x20,0x30,0x2e,
    0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,
    0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x20,0x2a,0x20,0x5f,0x33,0x31,0x35,0x20,
    0x2b,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,
    0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x61,0x63,0x20,0x3d,0x20,0x5f,0x33,0x31,0x37,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x33,0x32,0x31,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x32,0x34,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x32,0x37,0x20,0x3d,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x33,0x32,0x39,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x31,0x2c,0x20,
    0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x34,0x2c,0x20,0x5f,0x33,0x32,0x37,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x28,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x33,0x31,0x37,
    0x29,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x66,0x61,0x63,0x46,0x61,0x63,0x29,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x28,0x70,0x6f,0x77,0x28,0x5f,0x33,0x31,
    0x37,0x2c,0x20,0x5f,0x32,0x37,0x2e,0x66,0x61,0x63,0x32,0x46,0x61,0x63,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,0x39,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x37,0x2e,0x66,0x61,0x63,0x32,0x57,0x46,0x61,0x63,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,
    0x7a,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x46,0x61,0x63,
    0x29,0x2c,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x64,0x61,0x72,0x6b,0x65,0x6e,0x20,0x3d,0x20,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x73,0x73,0x61,0x6f,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x20,
    0x2a,0x20,0x5f,0x33,0x32,0x39,0x29,0x20,0x2a,0x20,0x30,0x2e,0x38,0x39,0x39,0x39,
    0x39,0x39,0x39,0x37,0x36,0x31,0x35,0x38,0x31,0x34,0x32,0x30,0x38,0x39,0x38,0x34,
    0x33,0x37,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x30,
    0x35,0x20,0x3d,0x3d,0x20,0x5f,0x32,0x34,0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x61,0x72,0x6b,0x65,0x6e,0x20,
    0x2a,0x3d,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x21,0x28,0x28,0x5f,0x32,0x37,0x2e,0x75,0x73,0x65,
    0x46,0x6c,0x61,0x67,0x20,0x26,0x20,0x32,0x29,0x20,0x21,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x30,0x75,0x29,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x61,0x72,0x6b,0x65,0x6e,0x20,0x3d,0x20,0x30,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2d,0x20,
    0x76,0x65,0x63,0x33,0x28,0x64,0x61,0x72,0x6b,0x65,0x6e,0x29,0x2c,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x28,0x5f,0x32,0x37,0x2e,0x75,0x73,0x65,0x46,0x6c,0x61,
    0x67,0x20,0x26,0x20,0x38,0x29,0x20,0x21,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x34,0x31,0x32,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x77,0x62,0x6f,0x69,0x74,0x5f,0x63,0x6f,0x6d,0x70,0x6f,
    0x73,0x65,0x64,0x2c,0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,
    0x31,0x37,0x20,0x3d,0x20,0x5f,0x34,0x31,0x32,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x34,0x31,0x38,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x34,
    0x31,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x20,0x28,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2d,0x20,0x31,0x2e,0x30,0x29,0x20,
    0x2a,0x20,0x5f,0x34,0x31,0x38,0x20,0x2b,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x34,0x32,0x32,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x33,0x33,0x20,0x3d,0x20,0x28,0x5f,
    0x34,0x32,0x32,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x34,0x31,0x38,0x29,0x20,
    0x2b,0x20,0x28,0x5f,0x34,0x31,0x32,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x34,
    0x31,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x34,0x33,0x33,
    0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x34,0x33,0x33,0x2e,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x34,0x33,0x33,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before composer.h"
#endif
static inline const sg_shader_desc* bloomDilateX_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = edl_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = bloom_dilateX_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "shine1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "shine2";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "bloomDilateX_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* bloomDilateY_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = edl_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = bloom_dilateY_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "shine";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "bloomDilateY_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* bloomblurX_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = edl_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = bloom_blurX_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "shine";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "bloomblurX_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* bloomblurYFin_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = screen_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = bloom_blurY_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "shine";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "wboit_emissive";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "bloomblurYFin_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* border_composer_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = screen_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = ui_composer_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 64;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "ui_composing";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.images[0].name = "bordering";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "ui_selection";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "border_composer_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* edl_composer_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = screen_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = edl_composer_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 352;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_27.w";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_27.h";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_27.pnear";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_27.pfar";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_27.ipmat";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_MAT4;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[5].name = "_27.ivmat";
      desc.fs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_MAT4;
      desc.fs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[6].name = "_27.pmat";
      desc.fs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_MAT4;
      desc.fs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[7].name = "_27.pv";
      desc.fs.uniform_blocks[0].uniforms[7].type = SG_UNIFORMTYPE_MAT4;
      desc.fs.uniform_blocks[0].uniforms[7].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[8].name = "_27.campos";
      desc.fs.uniform_blocks[0].uniforms[8].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[8].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[9].name = "_27.lookdir";
      desc.fs.uniform_blocks[0].uniforms[9].type = SG_UNIFORMTYPE_FLOAT3;
      desc.fs.uniform_blocks[0].uniforms[9].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[10].name = "_27.debugU";
      desc.fs.uniform_blocks[0].uniforms[10].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[10].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[11].name = "_27.facFac";
      desc.fs.uniform_blocks[0].uniforms[11].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[11].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[12].name = "_27.fac2Fac";
      desc.fs.uniform_blocks[0].uniforms[12].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[12].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[13].name = "_27.fac2WFac";
      desc.fs.uniform_blocks[0].uniforms[13].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[13].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[14].name = "_27.colorFac";
      desc.fs.uniform_blocks[0].uniforms[14].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[14].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[15].name = "_27.reverse1";
      desc.fs.uniform_blocks[0].uniforms[15].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[15].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[16].name = "_27.reverse2";
      desc.fs.uniform_blocks[0].uniforms[16].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[16].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[17].name = "_27.edrefl";
      desc.fs.uniform_blocks[0].uniforms[17].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[17].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[18].name = "_27.edlthres";
      desc.fs.uniform_blocks[0].uniforms[18].type = SG_UNIFORMTYPE_FLOAT;
      desc.fs.uniform_blocks[0].uniforms[18].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[19].name = "_27.useFlag";
      desc.fs.uniform_blocks[0].uniforms[19].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[19].array_count = 1;
      desc.fs.images[0].name = "color_hi_res";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "depth_hi_res";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "depth_lo_res";
      desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[3].name = "uDepth";
      desc.fs.images[3].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[3].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[4].name = "ssao";
      desc.fs.images[4].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[4].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[5].name = "wboit_composed";
      desc.fs.images[5].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[5].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "edl_composer_shader";
    }
    return &desc;
  }
  return 0;
}
