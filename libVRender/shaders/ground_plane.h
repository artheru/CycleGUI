#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input ground_plane.glsl --output ground_plane.h --slang glsl300es

    Overview:

        Shader program 'ground_plane':
            Get shader desc: ground_plane_shader_desc(sg_query_backend());
            Vertex shader: ground_plane_vs
                Attribute slots:
                    ATTR_ground_plane_vs_position_alpha = 0
                Uniform block 'ground_vs_params':
                    C struct: ground_vs_params_t
                    Bind slot: SLOT_ground_vs_params = 0
            Fragment shader: ground_plane_fs
                Uniform block 'ground_fs_params':
                    C struct: ground_fs_params_t
                    Bind slot: SLOT_ground_fs_params = 0

        Shader program 'skybox':
            Get shader desc: skybox_shader_desc(sg_query_backend());
            Vertex shader: sky_vs
                Attribute slots:
                    ATTR_sky_vs_position = 0
            Fragment shader: sky_fs
                Uniform block 'sky_fs':
                    C struct: sky_fs_t
                    Bind slot: SLOT_sky_fs = 0


    Shader descriptor structs:

        sg_shader ground_plane = sg_make_shader(ground_plane_shader_desc(sg_query_backend()));
        sg_shader skybox = sg_make_shader(skybox_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'ground_plane_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_ground_plane_vs_position_alpha] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'sky_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_sky_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]


    Bind slot and C-struct for uniform block 'ground_vs_params':

        ground_vs_params_t ground_vs_params = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_ground_vs_params, &SG_RANGE(ground_vs_params));

    Bind slot and C-struct for uniform block 'ground_fs_params':

        ground_fs_params_t ground_fs_params = {
            .starePosition = ...;
            .scope = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_ground_fs_params, &SG_RANGE(ground_fs_params));

    Bind slot and C-struct for uniform block 'sky_fs':

        sky_fs_t sky_fs = {
            .mieDirectionalG = ...;
            .invVM = ...;
            .invPM = ...;
            .vSunDirection = ...;
            .vSunfade = ...;
            .vBetaR = ...;
            .vBetaM = ...;
            .vSunE = ...;
            .toneMappingExposure = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_sky_fs, &SG_RANGE(sky_fs));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_ground_plane_vs_position_alpha (0)
#define ATTR_sky_vs_position (0)
#define SLOT_ground_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct ground_vs_params_t {
    glm::mat4 mvp;
} ground_vs_params_t;
#pragma pack(pop)
#define SLOT_ground_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct ground_fs_params_t {
    glm::vec3 starePosition;
    float scope;
} ground_fs_params_t;
#pragma pack(pop)
#define SLOT_sky_fs (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct sky_fs_t {
    float mieDirectionalG;
    uint8_t _pad_4[12];
    glm::mat4 invVM;
    glm::mat4 invPM;
    glm::vec3 vSunDirection;
    float vSunfade;
    glm::vec3 vBetaR;
    uint8_t _pad_172[4];
    glm::vec3 vBetaM;
    float vSunE;
    float toneMappingExposure;
    uint8_t _pad_196[12];
} sky_fs_t;
#pragma pack(pop)
/*
    #version 300 es
    
    uniform vec4 ground_vs_params[4];
    layout(location = 0) in vec4 position_alpha;
    out vec3 worldPosition;
    out float major_alpha;
    
    void main()
    {
        vec4 _34 = vec4(position_alpha.xyz, 1.0);
        gl_Position = mat4(ground_vs_params[0], ground_vs_params[1], ground_vs_params[2], ground_vs_params[3]) * _34;
        worldPosition = _34.xyz;
        major_alpha = position_alpha.w;
    }
    
*/
static const char ground_plane_vs_source_glsl300es[387] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x72,
    0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,
    0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x77,0x6f,0x72,0x6c,0x64,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x6d,0x61,0x6a,0x6f,0x72,0x5f,0x61,0x6c,0x70,0x68,0x61,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x34,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x67,0x72,0x6f,
    0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,
    0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x33,0x34,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x77,0x6f,0x72,0x6c,0x64,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x5f,0x33,0x34,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x6a,0x6f,0x72,0x5f,0x61,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x2e,0x77,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 ground_fs_params[1];
    in highp vec3 worldPosition;
    layout(location = 0) out highp vec4 frag_color;
    in highp float major_alpha;
    
    void main()
    {
        highp float _24 = length(worldPosition - ground_fs_params[0].xyz);
        highp float alpha = 1.0;
        if (_24 > (ground_fs_params[0].w * 0.4000000059604644775390625))
        {
            alpha = 1.0 - smoothstep(ground_fs_params[0].w * 0.60000002384185791015625, ground_fs_params[0].w, _24);
        }
        frag_color = vec4(0.5390625, 0.16796875, 0.8828125, alpha * major_alpha);
    }
    
*/
static const char ground_plane_fs_source_glsl300es[599] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x77,0x6f,0x72,0x6c,0x64,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x6d,0x61,0x6a,0x6f,0x72,0x5f,0x61,0x6c,0x70,0x68,0x61,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x32,0x34,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x77,0x6f,0x72,0x6c,
    0x64,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x67,0x72,0x6f,0x75,
    0x6e,0x64,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x31,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x34,0x20,0x3e,
    0x20,0x28,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,
    0x39,0x30,0x36,0x32,0x35,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x61,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x31,0x2e,
    0x30,0x20,0x2d,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x67,
    0x72,0x6f,0x75,0x6e,0x64,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,
    0x32,0x33,0x38,0x34,0x31,0x38,0x35,0x37,0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,
    0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x2c,0x20,0x5f,0x32,0x34,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x35,0x33,0x39,
    0x30,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x31,0x36,0x37,0x39,0x36,0x38,0x37,0x35,
    0x2c,0x20,0x30,0x2e,0x38,0x38,0x32,0x38,0x31,0x32,0x35,0x2c,0x20,0x61,0x6c,0x70,
    0x68,0x61,0x20,0x2a,0x20,0x6d,0x61,0x6a,0x6f,0x72,0x5f,0x61,0x6c,0x70,0x68,0x61,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec2 position;
    out vec2 fpos;
    
    void main()
    {
        gl_Position = vec4(position, 1.0, 1.0);
        fpos = position;
    }
    
*/
static const char sky_vs_source_glsl300es[155] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 sky_fs[13];
    in highp vec2 fpos;
    layout(location = 0) out highp vec4 frag_color;
    
    highp float rayleighPhase(highp float cosTheta)
    {
        return 0.0596831031143665313720703125 * (1.0 + pow(cosTheta, 2.0));
    }
    
    highp float hgPhase(highp float cosTheta, highp float g)
    {
        highp float _39 = pow(g, 2.0);
        return 0.079577468335628509521484375 * ((1.0 - _39) * (1.0 / pow(((g * (-2.0)) * cosTheta + 1.0) + _39, 1.5)));
    }
    
    highp vec3 RRTAndODTFit(highp vec3 v)
    {
        return (v * (v + vec3(0.02457859925925731658935546875)) + vec3(-9.0537003416102379560470581054688e-05)) / (v * ((v * 0.98372900485992431640625) + vec3(0.4329510033130645751953125)) + vec3(0.23808099329471588134765625));
    }
    
    highp vec3 ACESFilmicToneMapping(inout highp vec3 color)
    {
        color *= (sky_fs[12].x * 1.66666662693023681640625);
        color = mat3(vec3(0.59719002246856689453125, 0.075999997556209564208984375, 0.0284000001847743988037109375), vec3(0.354579985141754150390625, 0.908339977264404296875, 0.13382999598979949951171875), vec3(0.048229999840259552001953125, 0.0156599991023540496826171875, 0.837769985198974609375)) * color;
        highp vec3 param = color;
        color = RRTAndODTFit(param);
        color = mat3(vec3(1.60475003719329833984375, -0.10208000242710113525390625, -0.00326999998651444911956787109375), vec3(-0.5310800075531005859375, 1.108129978179931640625, -0.07276000082492828369140625), vec3(-0.0736699998378753662109375, -0.00604999996721744537353515625, 1.0760200023651123046875)) * color;
        return clamp(color, vec3(0.0), vec3(1.0));
    }
    
    void main()
    {
        highp vec4 _162 = mat4(sky_fs[5], sky_fs[6], sky_fs[7], sky_fs[8]) * vec4(fpos.x, fpos.y, -11.0, 1.0);
        _162.w = 0.0;
        highp vec3 _174 = normalize((mat4(sky_fs[1], sky_fs[2], sky_fs[3], sky_fs[4]) * _162).xyz);
        highp float _180 = acos(max(0.0, _174.z));
        highp float _195 = 0.1500000059604644775390625 * pow((-_180) * 57.2957763671875 + 93.88500213623046875, -1.2530000209808349609375) + cos(_180);
        highp vec3 _219 = exp(-((sky_fs[10].xyz * (8400.0 / _195)) + (sky_fs[11].xyz * (1250.0 / _195))));
        highp float _225 = dot(_174, sky_fs[9].xyz);
        highp float param = _225 * 0.5 + 0.5;
        highp float param_1 = _225;
        highp float param_2 = sky_fs[0].x;
        highp vec3 _264 = (((sky_fs[10].xyz * rayleighPhase(param)) + (sky_fs[11].xyz * hgPhase(param_1, param_2))) / (sky_fs[10].xyz + sky_fs[11].xyz)) * sky_fs[11].w;
        highp vec3 param_3 = pow(((pow(_264 * (vec3(1.0) - _219), vec3(1.5)) * mix(vec3(1.0), pow(_264 * _219, vec3(0.5)), vec3(clamp(pow(1.0 - sky_fs[9].xyz.z, 5.0), 0.0, 1.0))) + (vec3(0.100000001490116119384765625) * _219 + ((_219 * (sky_fs[11].w * 3000.0)) * smoothstep(0.999956667423248291015625, 0.999976694583892822265625, _225)))) * 0.039999999105930328369140625) + vec3(0.0, 0.0003000000142492353916168212890625, 0.000750000006519258022308349609375), vec3(1.0 / (1.2000000476837158203125 * sky_fs[9].w + 1.2000000476837158203125)));
        highp vec3 _365 = ACESFilmicToneMapping(param_3);
        frag_color = vec4(_365, 1.0);
    }
    
*/
static const char sky_fs_source_glsl300es[3104] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x31,0x33,0x5d,0x3b,0x0a,0x69,0x6e,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x70,0x6f,0x73,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,
    0x61,0x79,0x6c,0x65,0x69,0x67,0x68,0x50,0x68,0x61,0x73,0x65,0x28,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x6f,0x73,0x54,0x68,0x65,0x74,
    0x61,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x30,0x2e,0x30,0x35,0x39,0x36,0x38,0x33,0x31,0x30,0x33,0x31,0x31,0x34,0x33,0x36,
    0x36,0x35,0x33,0x31,0x33,0x37,0x32,0x30,0x37,0x30,0x33,0x31,0x32,0x35,0x20,0x2a,
    0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,0x70,0x6f,0x77,0x28,0x63,0x6f,0x73,0x54,
    0x68,0x65,0x74,0x61,0x2c,0x20,0x32,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x68,0x67,0x50,0x68,
    0x61,0x73,0x65,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x63,0x6f,0x73,0x54,0x68,0x65,0x74,0x61,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x67,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x39,0x20,0x3d,
    0x20,0x70,0x6f,0x77,0x28,0x67,0x2c,0x20,0x32,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x30,0x2e,0x30,0x37,0x39,0x35,0x37,
    0x37,0x34,0x36,0x38,0x33,0x33,0x35,0x36,0x32,0x38,0x35,0x30,0x39,0x35,0x32,0x31,
    0x34,0x38,0x34,0x33,0x37,0x35,0x20,0x2a,0x20,0x28,0x28,0x31,0x2e,0x30,0x20,0x2d,
    0x20,0x5f,0x33,0x39,0x29,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x70,
    0x6f,0x77,0x28,0x28,0x28,0x67,0x20,0x2a,0x20,0x28,0x2d,0x32,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x63,0x6f,0x73,0x54,0x68,0x65,0x74,0x61,0x20,0x2b,0x20,0x31,0x2e,
    0x30,0x29,0x20,0x2b,0x20,0x5f,0x33,0x39,0x2c,0x20,0x31,0x2e,0x35,0x29,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x52,0x52,0x54,0x41,0x6e,0x64,0x4f,0x44,0x54,0x46,0x69,0x74,0x28,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x76,0x20,0x2a,0x20,0x28,0x76,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x32,0x34,0x35,0x37,0x38,0x35,
    0x39,0x39,0x32,0x35,0x39,0x32,0x35,0x37,0x33,0x31,0x36,0x35,0x38,0x39,0x33,0x35,
    0x35,0x34,0x36,0x38,0x37,0x35,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,
    0x2d,0x39,0x2e,0x30,0x35,0x33,0x37,0x30,0x30,0x33,0x34,0x31,0x36,0x31,0x30,0x32,
    0x33,0x37,0x39,0x35,0x36,0x30,0x34,0x37,0x30,0x35,0x38,0x31,0x30,0x35,0x34,0x36,
    0x38,0x38,0x65,0x2d,0x30,0x35,0x29,0x29,0x20,0x2f,0x20,0x28,0x76,0x20,0x2a,0x20,
    0x28,0x28,0x76,0x20,0x2a,0x20,0x30,0x2e,0x39,0x38,0x33,0x37,0x32,0x39,0x30,0x30,
    0x34,0x38,0x35,0x39,0x39,0x32,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x29,
    0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x34,0x33,0x32,0x39,0x35,0x31,
    0x30,0x30,0x33,0x33,0x31,0x33,0x30,0x36,0x34,0x35,0x37,0x35,0x31,0x39,0x35,0x33,
    0x31,0x32,0x35,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x32,
    0x33,0x38,0x30,0x38,0x30,0x39,0x39,0x33,0x32,0x39,0x34,0x37,0x31,0x35,0x38,0x38,
    0x31,0x33,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x41,0x43,0x45,0x53,0x46,
    0x69,0x6c,0x6d,0x69,0x63,0x54,0x6f,0x6e,0x65,0x4d,0x61,0x70,0x70,0x69,0x6e,0x67,
    0x28,0x69,0x6e,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x3d,0x20,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,
    0x31,0x32,0x5d,0x2e,0x78,0x20,0x2a,0x20,0x31,0x2e,0x36,0x36,0x36,0x36,0x36,0x36,
    0x36,0x32,0x36,0x39,0x33,0x30,0x32,0x33,0x36,0x38,0x31,0x36,0x34,0x30,0x36,0x32,
    0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x39,0x37,0x31,
    0x39,0x30,0x30,0x32,0x32,0x34,0x36,0x38,0x35,0x36,0x36,0x38,0x39,0x34,0x35,0x33,
    0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x37,0x35,0x39,0x39,0x39,0x39,0x39,0x37,
    0x35,0x35,0x36,0x32,0x30,0x39,0x35,0x36,0x34,0x32,0x30,0x38,0x39,0x38,0x34,0x33,
    0x37,0x35,0x2c,0x20,0x30,0x2e,0x30,0x32,0x38,0x34,0x30,0x30,0x30,0x30,0x30,0x31,
    0x38,0x34,0x37,0x37,0x34,0x33,0x39,0x38,0x38,0x30,0x33,0x37,0x31,0x30,0x39,0x33,
    0x37,0x35,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x33,0x35,0x34,0x35,
    0x37,0x39,0x39,0x38,0x35,0x31,0x34,0x31,0x37,0x35,0x34,0x31,0x35,0x30,0x33,0x39,
    0x30,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x39,0x30,0x38,0x33,0x33,0x39,0x39,0x37,
    0x37,0x32,0x36,0x34,0x34,0x30,0x34,0x32,0x39,0x36,0x38,0x37,0x35,0x2c,0x20,0x30,
    0x2e,0x31,0x33,0x33,0x38,0x32,0x39,0x39,0x39,0x35,0x39,0x38,0x39,0x37,0x39,0x39,
    0x34,0x39,0x39,0x35,0x31,0x31,0x37,0x31,0x38,0x37,0x35,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x34,0x38,0x32,0x32,0x39,0x39,0x39,0x39,0x38,0x34,
    0x30,0x32,0x35,0x39,0x35,0x35,0x32,0x30,0x30,0x31,0x39,0x35,0x33,0x31,0x32,0x35,
    0x2c,0x20,0x30,0x2e,0x30,0x31,0x35,0x36,0x35,0x39,0x39,0x39,0x39,0x31,0x30,0x32,
    0x33,0x35,0x34,0x30,0x34,0x39,0x36,0x38,0x32,0x36,0x31,0x37,0x31,0x38,0x37,0x35,
    0x2c,0x20,0x30,0x2e,0x38,0x33,0x37,0x37,0x36,0x39,0x39,0x38,0x35,0x31,0x39,0x38,
    0x39,0x37,0x34,0x36,0x30,0x39,0x33,0x37,0x35,0x29,0x29,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x52,
    0x52,0x54,0x41,0x6e,0x64,0x4f,0x44,0x54,0x46,0x69,0x74,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x36,0x30,0x34,0x37,
    0x35,0x30,0x30,0x33,0x37,0x31,0x39,0x33,0x32,0x39,0x38,0x33,0x33,0x39,0x38,0x34,
    0x33,0x37,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x31,0x30,0x32,0x30,0x38,0x30,0x30,0x30,
    0x32,0x34,0x32,0x37,0x31,0x30,0x31,0x31,0x33,0x35,0x32,0x35,0x33,0x39,0x30,0x36,
    0x32,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x33,0x32,0x36,0x39,0x39,0x39,0x39,
    0x39,0x38,0x36,0x35,0x31,0x34,0x34,0x34,0x39,0x31,0x31,0x39,0x35,0x36,0x37,0x38,
    0x37,0x31,0x30,0x39,0x33,0x37,0x35,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x2d,
    0x30,0x2e,0x35,0x33,0x31,0x30,0x38,0x30,0x30,0x30,0x37,0x35,0x35,0x33,0x31,0x30,
    0x30,0x35,0x38,0x35,0x39,0x33,0x37,0x35,0x2c,0x20,0x31,0x2e,0x31,0x30,0x38,0x31,
    0x32,0x39,0x39,0x37,0x38,0x31,0x37,0x39,0x39,0x33,0x31,0x36,0x34,0x30,0x36,0x32,
    0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x37,0x32,0x37,0x36,0x30,0x30,0x30,0x30,0x38,
    0x32,0x34,0x39,0x32,0x38,0x32,0x38,0x33,0x36,0x39,0x31,0x34,0x30,0x36,0x32,0x35,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x2d,0x30,0x2e,0x30,0x37,0x33,0x36,0x36,
    0x39,0x39,0x39,0x39,0x38,0x33,0x37,0x38,0x37,0x35,0x33,0x36,0x36,0x32,0x31,0x30,
    0x39,0x33,0x37,0x35,0x2c,0x20,0x2d,0x30,0x2e,0x30,0x30,0x36,0x30,0x34,0x39,0x39,
    0x39,0x39,0x39,0x36,0x37,0x32,0x31,0x37,0x34,0x34,0x35,0x33,0x37,0x33,0x35,0x33,
    0x35,0x31,0x35,0x36,0x32,0x35,0x2c,0x20,0x31,0x2e,0x30,0x37,0x36,0x30,0x32,0x30,
    0x30,0x30,0x32,0x33,0x36,0x35,0x31,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,
    0x29,0x29,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,0x32,0x20,
    0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x35,0x5d,
    0x2c,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x73,0x6b,0x79,
    0x5f,0x66,0x73,0x5b,0x37,0x5d,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x38,
    0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x66,0x70,0x6f,0x73,0x2e,0x78,
    0x2c,0x20,0x66,0x70,0x6f,0x73,0x2e,0x79,0x2c,0x20,0x2d,0x31,0x31,0x2e,0x30,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x36,0x32,0x2e,
    0x77,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x37,0x34,0x20,0x3d,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,0x73,
    0x6b,0x79,0x5f,0x66,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,
    0x5b,0x32,0x5d,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x33,0x5d,0x2c,0x20,
    0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x34,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x36,
    0x32,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x38,0x30,0x20,0x3d,0x20,
    0x61,0x63,0x6f,0x73,0x28,0x6d,0x61,0x78,0x28,0x30,0x2e,0x30,0x2c,0x20,0x5f,0x31,
    0x37,0x34,0x2e,0x7a,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x39,0x35,0x20,0x3d,0x20,0x30,
    0x2e,0x31,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,
    0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x20,0x2a,0x20,0x70,0x6f,0x77,
    0x28,0x28,0x2d,0x5f,0x31,0x38,0x30,0x29,0x20,0x2a,0x20,0x35,0x37,0x2e,0x32,0x39,
    0x35,0x37,0x37,0x36,0x33,0x36,0x37,0x31,0x38,0x37,0x35,0x20,0x2b,0x20,0x39,0x33,
    0x2e,0x38,0x38,0x35,0x30,0x30,0x32,0x31,0x33,0x36,0x32,0x33,0x30,0x34,0x36,0x38,
    0x37,0x35,0x2c,0x20,0x2d,0x31,0x2e,0x32,0x35,0x33,0x30,0x30,0x30,0x30,0x32,0x30,
    0x39,0x38,0x30,0x38,0x33,0x34,0x39,0x36,0x30,0x39,0x33,0x37,0x35,0x29,0x20,0x2b,
    0x20,0x63,0x6f,0x73,0x28,0x5f,0x31,0x38,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x31,0x39,0x20,
    0x3d,0x20,0x65,0x78,0x70,0x28,0x2d,0x28,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,
    0x31,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x28,0x38,0x34,0x30,0x30,0x2e,
    0x30,0x20,0x2f,0x20,0x5f,0x31,0x39,0x35,0x29,0x29,0x20,0x2b,0x20,0x28,0x73,0x6b,
    0x79,0x5f,0x66,0x73,0x5b,0x31,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x28,
    0x31,0x32,0x35,0x30,0x2e,0x30,0x20,0x2f,0x20,0x5f,0x31,0x39,0x35,0x29,0x29,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x32,0x32,0x35,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x31,
    0x37,0x34,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x39,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x32,0x32,0x35,
    0x20,0x2a,0x20,0x30,0x2e,0x35,0x20,0x2b,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x32,0x32,0x35,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x30,
    0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x32,0x36,0x34,0x20,0x3d,0x20,0x28,0x28,0x28,0x73,0x6b,
    0x79,0x5f,0x66,0x73,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x72,
    0x61,0x79,0x6c,0x65,0x69,0x67,0x68,0x50,0x68,0x61,0x73,0x65,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x29,0x29,0x20,0x2b,0x20,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x31,
    0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x68,0x67,0x50,0x68,0x61,0x73,0x65,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x29,0x29,0x29,0x20,0x2f,0x20,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x31,
    0x30,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,
    0x31,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x73,0x6b,0x79,0x5f,
    0x66,0x73,0x5b,0x31,0x31,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x20,0x3d,0x20,0x70,0x6f,0x77,0x28,0x28,0x28,0x70,0x6f,0x77,0x28,0x5f,0x32,0x36,
    0x34,0x20,0x2a,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x20,0x2d,
    0x20,0x5f,0x32,0x31,0x39,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x35,
    0x29,0x29,0x20,0x2a,0x20,0x6d,0x69,0x78,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,
    0x30,0x29,0x2c,0x20,0x70,0x6f,0x77,0x28,0x5f,0x32,0x36,0x34,0x20,0x2a,0x20,0x5f,
    0x32,0x31,0x39,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x35,0x29,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x70,0x6f,0x77,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x39,0x5d,0x2e,
    0x78,0x79,0x7a,0x2e,0x7a,0x2c,0x20,0x35,0x2e,0x30,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,
    0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x20,
    0x2a,0x20,0x5f,0x32,0x31,0x39,0x20,0x2b,0x20,0x28,0x28,0x5f,0x32,0x31,0x39,0x20,
    0x2a,0x20,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,0x31,0x31,0x5d,0x2e,0x77,0x20,
    0x2a,0x20,0x33,0x30,0x30,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x73,0x6d,0x6f,
    0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x30,0x2e,0x39,0x39,0x39,0x39,0x35,0x36,
    0x36,0x36,0x37,0x34,0x32,0x33,0x32,0x34,0x38,0x32,0x39,0x31,0x30,0x31,0x35,0x36,
    0x32,0x35,0x2c,0x20,0x30,0x2e,0x39,0x39,0x39,0x39,0x37,0x36,0x36,0x39,0x34,0x35,
    0x38,0x33,0x38,0x39,0x32,0x38,0x32,0x32,0x32,0x36,0x35,0x36,0x32,0x35,0x2c,0x20,
    0x5f,0x32,0x32,0x35,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x33,0x39,
    0x39,0x39,0x39,0x39,0x39,0x39,0x31,0x30,0x35,0x39,0x33,0x30,0x33,0x32,0x38,0x33,
    0x36,0x39,0x31,0x34,0x30,0x36,0x32,0x35,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,
    0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x30,0x30,0x33,0x30,0x30,0x30,0x30,
    0x30,0x30,0x31,0x34,0x32,0x34,0x39,0x32,0x33,0x35,0x33,0x39,0x31,0x36,0x31,0x36,
    0x38,0x32,0x31,0x32,0x38,0x39,0x30,0x36,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,0x30,
    0x30,0x37,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x36,0x35,0x31,0x39,0x32,0x35,0x38,
    0x30,0x32,0x32,0x33,0x30,0x38,0x33,0x34,0x39,0x36,0x30,0x39,0x33,0x37,0x35,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x31,0x2e,
    0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,0x36,0x38,0x33,0x37,0x31,0x35,0x38,
    0x32,0x30,0x33,0x31,0x32,0x35,0x20,0x2a,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5b,
    0x39,0x5d,0x2e,0x77,0x20,0x2b,0x20,0x31,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,
    0x34,0x37,0x36,0x38,0x33,0x37,0x31,0x35,0x38,0x32,0x30,0x33,0x31,0x32,0x35,0x29,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x33,0x36,0x35,0x20,0x3d,0x20,0x41,0x43,0x45,0x53,0x46,0x69,
    0x6c,0x6d,0x69,0x63,0x54,0x6f,0x6e,0x65,0x4d,0x61,0x70,0x70,0x69,0x6e,0x67,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x5f,0x33,0x36,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before ground_plane.h"
#endif
static inline const sg_shader_desc* ground_plane_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position_alpha";
      desc.vs.source = ground_plane_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "ground_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = ground_plane_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "ground_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.label = "ground_plane_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* skybox_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = sky_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = sky_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 208;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "sky_fs";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 13;
      desc.label = "skybox_shader";
    }
    return &desc;
  }
  return 0;
}
