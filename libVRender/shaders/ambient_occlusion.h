#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input ambient_occlusion.glsl --output ambient_occlusion.h --slang glsl300es

    Overview:

        Shader program 'ssao':
            Get shader desc: ssao_shader_desc(sg_query_backend());
            Vertex shader: blending_quad
                Attribute slots:
                    ATTR_blending_quad_pos = 0
            Fragment shader: ssao_fs
                Uniform block 'SSAOUniforms':
                    C struct: SSAOUniforms_t
                    Bind slot: SLOT_SSAOUniforms = 0
                Image 'uDepth':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uDepth = 0
                Image 'uNormalBuffer':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uNormalBuffer = 1


    Shader descriptor structs:

        sg_shader ssao = sg_make_shader(ssao_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'blending_quad':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_blending_quad_pos] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_uDepth = 0;
        SLOT_uNormalBuffer = 1;

    Bind slot and C-struct for uniform block 'SSAOUniforms':

        SSAOUniforms_t SSAOUniforms = {
            .P = ...;
            .iP = ...;
            .iV = ...;
            .cP = ...;
            .weight = ...;
            .uSampleRadius = ...;
            .uBias = ...;
            .uAttenuation = ...;
            .uDepthRange = ...;
            .time = ...;
            .useFlag = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_SSAOUniforms, &SG_RANGE(SSAOUniforms));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_blending_quad_pos (0)
#define SLOT_uDepth (0)
#define SLOT_uNormalBuffer (1)
#define SLOT_SSAOUniforms (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct SSAOUniforms_t {
    glm::mat4 P;
    glm::mat4 iP;
    glm::mat4 iV;
    glm::vec3 cP;
    float weight;
    float uSampleRadius;
    float uBias;
    float uAttenuation[2];
    float uDepthRange[2];
    float time;
    float useFlag;
} SSAOUniforms_t;
#pragma pack(pop)
/*
    #version 300 es
    
    layout(location = 0) in vec2 pos;
    out vec2 uv;
    
    void main()
    {
        gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
        uv = pos;
    }
    
*/
static const char blending_quad_source_glsl300es[156] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x70,0x6f,0x73,0x20,0x2a,0x20,0x32,0x2e,0x30,
    0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x2c,0x20,0x30,
    0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,
    0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 SSAOUniforms[15];
    uniform highp sampler2D uDepth;
    uniform highp sampler2D uNormalBuffer;
    
    in highp vec2 uv;
    layout(location = 0) out highp float occlusion;
    
    highp float perspectiveDepthToViewZ(highp float depth, highp float near, highp float far)
    {
        highp float _110;
        if (depth > 0.5)
        {
            _110 = depth;
        }
        else
        {
            _110 = depth + 0.5;
        }
        return (near * far) / ((far - near) * _110 + (-far));
    }
    
    highp float getViewZ(highp float depth)
    {
        return perspectiveDepthToViewZ(depth, SSAOUniforms[14].x, SSAOUniforms[14].y);
    }
    
    highp vec2 hash21(highp float p)
    {
        highp vec3 _51 = fract(vec3(p) * vec3(0.103100001811981201171875, 0.10300000011920928955078125, 0.097300000488758087158203125));
        highp vec3 _61 = _51 + vec3(dot(_51, _51.yzx + vec3(33.3300018310546875)));
        return fract((_61.xx + _61.yz) * _61.zy);
    }
    
    highp vec4 getPosition(highp vec2 uv_1)
    {
        highp vec4 _145 = texture(uDepth, uv_1);
        highp float _146 = _145.x;
        if ((_146 < 0.0) || (_146 == 1.0))
        {
            return vec4(0.0);
        }
        return vec4((mat4(SSAOUniforms[4], SSAOUniforms[5], SSAOUniforms[6], SSAOUniforms[7]) * vec4(uv_1, 2.0 * _146 + (-1.0), 1.0)).xyz * (SSAOUniforms[2].w * getViewZ(_146) + SSAOUniforms[3].w), 1.0);
    }
    
    highp float hash12(highp vec2 p)
    {
        highp vec3 _81 = fract(vec3(p.xyx) * 0.103100001811981201171875);
        highp vec3 _90 = _81 + vec3(dot(_81, _81.yzx + vec3(33.3300018310546875)));
        return fract((_90.x + _90.y) * _90.z);
    }
    
    highp float getOcclusion(highp vec3 position, highp vec3 normal, highp vec2 uv_1)
    {
        highp vec2 param = uv_1;
        highp vec4 _205 = getPosition(param);
        if (_205.w == 0.0)
        {
            return 0.0;
        }
        highp vec3 _218 = _205.xyz - position;
        highp float _223 = max(length(_218), 9.9999997473787516355514526367188e-05);
        highp float _240;
        if (_223 < 0.00999999977648258209228515625)
        {
            _240 = _223 * 100.0;
        }
        else
        {
            highp float _248;
            if (_223 > 0.5)
            {
                _248 = (0.60000002384185791015625 - _223) * 10.0;
            }
            else
            {
                _248 = 1.0;
            }
            _240 = _248;
        }
        return max(dot(normal, _218 / vec3(_223)) - SSAOUniforms[13].y, 0.0) * clamp(_240, 0.0, 1.0);
    }
    
    void main()
    {
        highp vec4 _282 = texture(uDepth, uv);
        highp float _283 = _282.x;
        if ((_283 == 1.0) || (_283 < 0.0))
        {
            discard;
        }
        highp float _294 = getViewZ(_283);
        highp float _306 = SSAOUniforms[14].z * 9.9999997473787516355514526367188e-05;
        highp float param = _306;
        highp vec2 _316 = uv + ((hash21(param) / vec2(textureSize(uDepth, 0))) * 0.100000001490116119384765625);
        highp vec2 param_1 = _316;
        highp vec3 _323 = getPosition(param_1).xyz;
        highp vec3 _330 = normalize(texture(uNormalBuffer, _316).xyz);
        highp vec2 _345 = _330.xy;
        highp vec2 param_2 = ((uv * vec2(textureSize(uDepth, 0))) * 0.00999999977648258209228515625) + (_345 * 0.100000001490116119384765625);
        highp float _355 = hash12(param_2) * 6.283185482025146484375 + _306;
        highp vec2 k1 = vec2(cos(_355), sin(_355)) * (SSAOUniforms[13].x / _294);
        occlusion = 0.0;
        for (int i = 0; i < 32; i++)
        {
            k1 = vec2(k1.x * 0.766044437885284423828125 + (k1.y * (-0.642787635326385498046875)), k1.x * 0.642787635326385498046875 + (k1.y * 0.766044437885284423828125));
            highp vec2 param_3 = (uv * 31.700000762939453125) + (_345 * 7.30000019073486328125);
            highp vec3 param_4 = _323;
            highp vec3 param_5 = _330;
            highp vec2 param_6 = _316 + ((k1 * (float(i) * (0.20000000298023223876953125 * hash12(param_3) + 0.89999997615814208984375))) / vec2(textureSize(uDepth, 0)));
            occlusion += getOcclusion(param_4, param_5, param_6);
        }
        occlusion = clamp(occlusion * 0.03125, 0.0, 1.0) * SSAOUniforms[12].w;
        occlusion *= (1.0 - smoothstep(30.0, 60.0, -_294));
    }
    
*/
static const char ssao_fs_source_glsl300es[3994] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x31,
    0x35,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x44,0x65,0x70,
    0x74,0x68,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x4e,0x6f,0x72,
    0x6d,0x61,0x6c,0x42,0x75,0x66,0x66,0x65,0x72,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x6f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x65,0x72,0x73,0x70,
    0x65,0x63,0x74,0x69,0x76,0x65,0x44,0x65,0x70,0x74,0x68,0x54,0x6f,0x56,0x69,0x65,
    0x77,0x5a,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,
    0x65,0x70,0x74,0x68,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x6e,0x65,0x61,0x72,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x66,0x61,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x64,0x65,0x70,0x74,0x68,0x20,0x3e,
    0x20,0x30,0x2e,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x31,0x31,0x30,0x20,0x3d,0x20,0x64,0x65,0x70,0x74,0x68,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x31,0x31,0x30,0x20,0x3d,0x20,0x64,0x65,0x70,0x74,0x68,0x20,0x2b,0x20,0x30,0x2e,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x28,0x6e,0x65,0x61,0x72,0x20,0x2a,0x20,0x66,0x61,0x72,0x29,
    0x20,0x2f,0x20,0x28,0x28,0x66,0x61,0x72,0x20,0x2d,0x20,0x6e,0x65,0x61,0x72,0x29,
    0x20,0x2a,0x20,0x5f,0x31,0x31,0x30,0x20,0x2b,0x20,0x28,0x2d,0x66,0x61,0x72,0x29,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x67,0x65,0x74,0x56,0x69,0x65,0x77,0x5a,0x28,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x70,0x65,0x72,0x73,0x70,
    0x65,0x63,0x74,0x69,0x76,0x65,0x44,0x65,0x70,0x74,0x68,0x54,0x6f,0x56,0x69,0x65,
    0x77,0x5a,0x28,0x64,0x65,0x70,0x74,0x68,0x2c,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x31,0x34,0x5d,0x2e,0x78,0x2c,0x20,0x53,0x53,
    0x41,0x4f,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x31,0x34,0x5d,0x2e,0x79,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,
    0x20,0x68,0x61,0x73,0x68,0x32,0x31,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x31,0x20,0x3d,0x20,0x66,0x72,
    0x61,0x63,0x74,0x28,0x76,0x65,0x63,0x33,0x28,0x70,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x31,0x30,0x33,0x31,0x30,0x30,0x30,0x30,0x31,0x38,0x31,
    0x31,0x39,0x38,0x31,0x32,0x30,0x31,0x31,0x37,0x31,0x38,0x37,0x35,0x2c,0x20,0x30,
    0x2e,0x31,0x30,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,
    0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,
    0x39,0x37,0x33,0x30,0x30,0x30,0x30,0x30,0x34,0x38,0x38,0x37,0x35,0x38,0x30,0x38,
    0x37,0x31,0x35,0x38,0x32,0x30,0x33,0x31,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x36,0x31,
    0x20,0x3d,0x20,0x5f,0x35,0x31,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x64,0x6f,
    0x74,0x28,0x5f,0x35,0x31,0x2c,0x20,0x5f,0x35,0x31,0x2e,0x79,0x7a,0x78,0x20,0x2b,
    0x20,0x76,0x65,0x63,0x33,0x28,0x33,0x33,0x2e,0x33,0x33,0x30,0x30,0x30,0x31,0x38,
    0x33,0x31,0x30,0x35,0x34,0x36,0x38,0x37,0x35,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x72,0x61,0x63,0x74,0x28,0x28,
    0x5f,0x36,0x31,0x2e,0x78,0x78,0x20,0x2b,0x20,0x5f,0x36,0x31,0x2e,0x79,0x7a,0x29,
    0x20,0x2a,0x20,0x5f,0x36,0x31,0x2e,0x7a,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x65,0x74,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x5f,0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x34,0x35,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x44,0x65,0x70,0x74,0x68,0x2c,0x20,0x75,
    0x76,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x36,0x20,0x3d,0x20,0x5f,0x31,0x34,
    0x35,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x5f,0x31,
    0x34,0x36,0x20,0x3c,0x20,0x30,0x2e,0x30,0x29,0x20,0x7c,0x7c,0x20,0x28,0x5f,0x31,
    0x34,0x36,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x53,0x53,0x41,0x4f,0x55,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x75,0x76,0x5f,0x31,0x2c,0x20,0x32,0x2e,0x30,0x20,0x2a,0x20,0x5f,
    0x31,0x34,0x36,0x20,0x2b,0x20,0x28,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x28,0x53,0x53,0x41,0x4f,0x55,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x67,
    0x65,0x74,0x56,0x69,0x65,0x77,0x5a,0x28,0x5f,0x31,0x34,0x36,0x29,0x20,0x2b,0x20,
    0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x33,0x5d,0x2e,
    0x77,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x68,0x61,0x73,0x68,0x31,0x32,0x28,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x38,0x31,0x20,0x3d,0x20,0x66,0x72,0x61,0x63,0x74,0x28,0x76,0x65,0x63,0x33,0x28,
    0x70,0x2e,0x78,0x79,0x78,0x29,0x20,0x2a,0x20,0x30,0x2e,0x31,0x30,0x33,0x31,0x30,
    0x30,0x30,0x30,0x31,0x38,0x31,0x31,0x39,0x38,0x31,0x32,0x30,0x31,0x31,0x37,0x31,
    0x38,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x39,0x30,0x20,0x3d,0x20,0x5f,0x38,0x31,0x20,0x2b,
    0x20,0x76,0x65,0x63,0x33,0x28,0x64,0x6f,0x74,0x28,0x5f,0x38,0x31,0x2c,0x20,0x5f,
    0x38,0x31,0x2e,0x79,0x7a,0x78,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x33,0x33,
    0x2e,0x33,0x33,0x30,0x30,0x30,0x31,0x38,0x33,0x31,0x30,0x35,0x34,0x36,0x38,0x37,
    0x35,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x66,0x72,0x61,0x63,0x74,0x28,0x28,0x5f,0x39,0x30,0x2e,0x78,0x20,0x2b,0x20,
    0x5f,0x39,0x30,0x2e,0x79,0x29,0x20,0x2a,0x20,0x5f,0x39,0x30,0x2e,0x7a,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x67,0x65,0x74,0x4f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,0x28,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x75,0x76,0x5f,0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x75,
    0x76,0x5f,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x32,0x30,0x35,0x20,0x3d,0x20,0x67,0x65,0x74,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x30,0x35,0x2e,0x77,0x20,0x3d,0x3d,
    0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x30,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x31,0x38,0x20,0x3d,0x20,0x5f,0x32,0x30,0x35,
    0x2e,0x78,0x79,0x7a,0x20,0x2d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x32,0x32,0x33,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x6c,0x65,0x6e,0x67,
    0x74,0x68,0x28,0x5f,0x32,0x31,0x38,0x29,0x2c,0x20,0x39,0x2e,0x39,0x39,0x39,0x39,
    0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,
    0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x32,0x34,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x32,0x32,0x33,0x20,0x3c,0x20,0x30,0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,
    0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,
    0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x34,0x30,0x20,0x3d,0x20,0x5f,0x32,0x32,
    0x33,0x20,0x2a,0x20,0x31,0x30,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x32,0x34,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x32,0x33,0x20,0x3e,0x20,0x30,0x2e,0x35,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x34,0x38,0x20,0x3d,0x20,0x28,
    0x30,0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x38,0x34,0x31,0x38,0x35,
    0x37,0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x20,0x2d,0x20,0x5f,0x32,0x32,0x33,
    0x29,0x20,0x2a,0x20,0x31,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x34,0x38,0x20,0x3d,0x20,0x31,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x34,0x30,0x20,0x3d,0x20,0x5f,0x32,0x34,0x38,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x2c,0x20,0x5f,0x32,0x31,0x38,0x20,0x2f,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,
    0x32,0x32,0x33,0x29,0x29,0x20,0x2d,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x32,0x34,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x38,0x32,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x44,0x65,0x70,0x74,0x68,0x2c,
    0x20,0x75,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x38,0x33,0x20,0x3d,0x20,0x5f,0x32,0x38,
    0x32,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x5f,0x32,
    0x38,0x33,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x29,0x20,0x7c,0x7c,0x20,0x28,0x5f,
    0x32,0x38,0x33,0x20,0x3c,0x20,0x30,0x2e,0x30,0x29,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,
    0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x34,0x20,0x3d,0x20,
    0x67,0x65,0x74,0x56,0x69,0x65,0x77,0x5a,0x28,0x5f,0x32,0x38,0x33,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x33,0x30,0x36,0x20,0x3d,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5b,0x31,0x34,0x5d,0x2e,0x7a,0x20,0x2a,0x20,0x39,0x2e,0x39,0x39,
    0x39,0x39,0x39,0x39,0x37,0x34,0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,
    0x35,0x35,0x31,0x34,0x35,0x32,0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x33,0x30,0x36,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x5f,0x33,0x31,0x36,0x20,0x3d,0x20,0x75,0x76,0x20,0x2b,0x20,0x28,0x28,0x68,0x61,
    0x73,0x68,0x32,0x31,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2f,0x20,0x76,0x65,
    0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x75,
    0x44,0x65,0x70,0x74,0x68,0x2c,0x20,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,
    0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,
    0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x33,0x31,0x36,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x32,0x33,
    0x20,0x3d,0x20,0x67,0x65,0x74,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x33,0x30,
    0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x75,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x42,0x75,0x66,0x66,
    0x65,0x72,0x2c,0x20,0x5f,0x33,0x31,0x36,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,
    0x33,0x34,0x35,0x20,0x3d,0x20,0x5f,0x33,0x33,0x30,0x2e,0x78,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x28,0x28,0x75,0x76,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,
    0x75,0x44,0x65,0x70,0x74,0x68,0x2c,0x20,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x30,
    0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,
    0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x20,
    0x2b,0x20,0x28,0x5f,0x33,0x34,0x35,0x20,0x2a,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,
    0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,
    0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x35,0x35,0x20,0x3d,
    0x20,0x68,0x61,0x73,0x68,0x31,0x32,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,
    0x20,0x2a,0x20,0x36,0x2e,0x32,0x38,0x33,0x31,0x38,0x35,0x34,0x38,0x32,0x30,0x32,
    0x35,0x31,0x34,0x36,0x34,0x38,0x34,0x33,0x37,0x35,0x20,0x2b,0x20,0x5f,0x33,0x30,
    0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x6b,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x63,0x6f,0x73,0x28,
    0x5f,0x33,0x35,0x35,0x29,0x2c,0x20,0x73,0x69,0x6e,0x28,0x5f,0x33,0x35,0x35,0x29,
    0x29,0x20,0x2a,0x20,0x28,0x53,0x53,0x41,0x4f,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x73,0x5b,0x31,0x33,0x5d,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x32,0x39,0x34,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,
    0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x33,0x32,
    0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x6b,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x6b,
    0x31,0x2e,0x78,0x20,0x2a,0x20,0x30,0x2e,0x37,0x36,0x36,0x30,0x34,0x34,0x34,0x33,
    0x37,0x38,0x38,0x35,0x32,0x38,0x34,0x34,0x32,0x33,0x38,0x32,0x38,0x31,0x32,0x35,
    0x20,0x2b,0x20,0x28,0x6b,0x31,0x2e,0x79,0x20,0x2a,0x20,0x28,0x2d,0x30,0x2e,0x36,
    0x34,0x32,0x37,0x38,0x37,0x36,0x33,0x35,0x33,0x32,0x36,0x33,0x38,0x35,0x34,0x39,
    0x38,0x30,0x34,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x6b,0x31,0x2e,0x78,0x20,
    0x2a,0x20,0x30,0x2e,0x36,0x34,0x32,0x37,0x38,0x37,0x36,0x33,0x35,0x33,0x32,0x36,
    0x33,0x38,0x35,0x34,0x39,0x38,0x30,0x34,0x36,0x38,0x37,0x35,0x20,0x2b,0x20,0x28,
    0x6b,0x31,0x2e,0x79,0x20,0x2a,0x20,0x30,0x2e,0x37,0x36,0x36,0x30,0x34,0x34,0x34,
    0x33,0x37,0x38,0x38,0x35,0x32,0x38,0x34,0x34,0x32,0x33,0x38,0x32,0x38,0x31,0x32,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,
    0x3d,0x20,0x28,0x75,0x76,0x20,0x2a,0x20,0x33,0x31,0x2e,0x37,0x30,0x30,0x30,0x30,
    0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x29,0x20,0x2b,
    0x20,0x28,0x5f,0x33,0x34,0x35,0x20,0x2a,0x20,0x37,0x2e,0x33,0x30,0x30,0x30,0x30,
    0x30,0x31,0x39,0x30,0x37,0x33,0x34,0x38,0x36,0x33,0x32,0x38,0x31,0x32,0x35,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,
    0x33,0x32,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,
    0x3d,0x20,0x5f,0x33,0x33,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x36,0x20,0x3d,0x20,0x5f,0x33,0x31,0x36,0x20,0x2b,0x20,0x28,0x28,0x6b,0x31,
    0x20,0x2a,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x69,0x29,0x20,0x2a,0x20,0x28,
    0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,
    0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x20,0x2a,0x20,0x68,
    0x61,0x73,0x68,0x31,0x32,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,
    0x20,0x30,0x2e,0x38,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x31,0x35,0x38,0x31,
    0x34,0x32,0x30,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x29,0x29,0x20,0x2f,0x20,
    0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,
    0x28,0x75,0x44,0x65,0x70,0x74,0x68,0x2c,0x20,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,
    0x20,0x2b,0x3d,0x20,0x67,0x65,0x74,0x4f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x6f,0x63,0x63,0x6c,0x75,0x73,0x69,
    0x6f,0x6e,0x20,0x2a,0x20,0x30,0x2e,0x30,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x53,0x53,0x41,0x4f,0x55,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x2e,0x77,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x63,0x63,0x6c,0x75,0x73,0x69,0x6f,0x6e,0x20,0x2a,0x3d,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,
    0x28,0x33,0x30,0x2e,0x30,0x2c,0x20,0x36,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x5f,0x32,
    0x39,0x34,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before ambient_occlusion.h"
#endif
static inline const sg_shader_desc* ssao_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.vs.source = blending_quad_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = ssao_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 240;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "SSAOUniforms";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 15;
      desc.fs.images[0].name = "uDepth";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "uNormalBuffer";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "ssao_shader";
    }
    return &desc;
  }
  return 0;
}
