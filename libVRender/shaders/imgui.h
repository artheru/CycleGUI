#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input imgui.glsl --output imgui.h --slang glsl300es

    Overview:

        Shader program 'imgui':
            Get shader desc: imgui_shader_desc(sg_query_backend());
            Vertex shader: imgui_vs
                Attribute slots:
                    ATTR_imgui_vs_Position = 0
                    ATTR_imgui_vs_TexCoord0 = 1
                    ATTR_imgui_vs_Color0 = 2
                Uniform block 'imgui_vs_params':
                    C struct: imgui_vs_params_t
                    Bind slot: SLOT_imgui_vs_params = 0
            Fragment shader: imgui_fs
                Image 'Texture':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_Texture = 0


    Shader descriptor structs:

        sg_shader imgui = sg_make_shader(imgui_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'imgui_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_imgui_vs_Position] = { ... },
                    [ATTR_imgui_vs_TexCoord0] = { ... },
                    [ATTR_imgui_vs_Color0] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_Texture = 0;

    Bind slot and C-struct for uniform block 'imgui_vs_params':

        imgui_vs_params_t imgui_vs_params = {
            .ProjMtx = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_imgui_vs_params, &SG_RANGE(imgui_vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_imgui_vs_Position (0)
#define ATTR_imgui_vs_TexCoord0 (1)
#define ATTR_imgui_vs_Color0 (2)
#define SLOT_Texture (0)
#define SLOT_imgui_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct imgui_vs_params_t {
    glm::mat4 ProjMtx;
} imgui_vs_params_t;
#pragma pack(pop)
/*
    #version 300 es
    
    uniform vec4 imgui_vs_params[4];
    out vec2 Frag_UV;
    layout(location = 1) in vec2 TexCoord0;
    out vec4 Frag_Color;
    layout(location = 2) in vec4 Color0;
    layout(location = 0) in vec2 Position;
    
    void main()
    {
        Frag_UV = TexCoord0;
        Frag_Color = Color0;
        gl_Position = mat4(imgui_vs_params[0], imgui_vs_params[1], imgui_vs_params[2], imgui_vs_params[3]) * vec4(Position, 0.0, 1.0);
        gl_Position.z = 0.0;
    }
    
*/
static const char imgui_vs_source_glsl300es[430] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x69,0x6d,
    0x67,0x75,0x69,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x46,0x72,0x61,0x67,0x5f,
    0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x46,0x72,0x61,0x67,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x43,0x6f,
    0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x20,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x46,0x72,0x61,0x67,0x5f,0x55,0x56,0x20,0x3d,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x5f,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x43,0x6f,0x6c,0x6f,0x72,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x69,0x6d,0x67,0x75,0x69,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x69,0x6d,0x67,0x75,0x69,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x69,0x6d,0x67,
    0x75,0x69,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,
    0x20,0x69,0x6d,0x67,0x75,0x69,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x2e,0x7a,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D Texture;
    
    layout(location = 0) out highp vec4 Out_Color;
    in highp vec4 Frag_Color;
    in highp vec2 Frag_UV;
    
    void main()
    {
        Out_Color = Frag_Color * texture(Texture, Frag_UV);
    }
    
*/
static const char imgui_fs_source_glsl300es[268] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x4f,0x75,0x74,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x46,0x72,
    0x61,0x67,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x46,0x72,0x61,0x67,0x5f,0x55,0x56,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x4f,0x75,0x74,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x46,0x72,0x61,0x67,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x46,0x72,
    0x61,0x67,0x5f,0x55,0x56,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before imgui.h"
#endif
static inline const sg_shader_desc* imgui_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "Position";
      desc.attrs[1].name = "TexCoord0";
      desc.attrs[2].name = "Color0";
      desc.vs.source = imgui_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "imgui_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = imgui_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "Texture";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "imgui_shader";
    }
    return &desc;
  }
  return 0;
}
