#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input grating_display.glsl --output grating_display.h --slang glsl300es

    Overview:

        Shader program 'grating_display':
            Get shader desc: grating_display_shader_desc(sg_query_backend());
            Vertex shader: grating_display_vs
                Attribute slots:
                Uniform block 'grating_display_vs_params':
                    C struct: grating_display_vs_params_t
                    Bind slot: SLOT_grating_display_vs_params = 0
            Fragment shader: grating_display_fs
                Uniform block 'grating_display_fs_params':
                    C struct: grating_display_fs_params_t
                    Bind slot: SLOT_grating_display_fs_params = 0
                Image 'left':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_left = 0
                Image 'right':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_right = 1


    Shader descriptor structs:

        sg_shader grating_display = sg_make_shader(grating_display_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'grating_display_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_left = 0;
        SLOT_right = 1;

    Bind slot and C-struct for uniform block 'grating_display_vs_params':

        grating_display_vs_params_t grating_display_vs_params = {
            .screen_size_mm = ...;
            .grating_dir_width_mm = ...;
            .grating_to_screen_mm = ...;
            .slot_width_mm = ...;
            .left_eye_pos_mm = ...;
            .right_eye_pos_mm = ...;
            .monitor = ...;
            .disp_area = ...;
            .start_grating = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_grating_display_vs_params, &SG_RANGE(grating_display_vs_params));

    Bind slot and C-struct for uniform block 'grating_display_fs_params':

        grating_display_fs_params_t grating_display_fs_params = {
            .screen_size_mm = ...;
            .left_eye_pos_mm = ...;
            .right_eye_pos_mm = ...;
            .pupil_factor = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_grating_display_fs_params, &SG_RANGE(grating_display_fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define SLOT_left (0)
#define SLOT_right (1)
#define SLOT_grating_display_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct grating_display_vs_params_t {
    glm::vec2 screen_size_mm;
    uint8_t _pad_8[8];
    glm::vec3 grating_dir_width_mm;
    float grating_to_screen_mm;
    float slot_width_mm;
    uint8_t _pad_36[12];
    glm::vec3 left_eye_pos_mm;
    uint8_t _pad_60[4];
    glm::vec3 right_eye_pos_mm;
    uint8_t _pad_76[4];
    glm::vec4 monitor;
    glm::vec4 disp_area;
    float start_grating;
    uint8_t _pad_116[12];
} grating_display_vs_params_t;
#pragma pack(pop)
#define SLOT_grating_display_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct grating_display_fs_params_t {
    glm::vec2 screen_size_mm;
    uint8_t _pad_8[8];
    glm::vec3 left_eye_pos_mm;
    uint8_t _pad_28[4];
    glm::vec3 right_eye_pos_mm;
    float pupil_factor;
} grating_display_fs_params_t;
#pragma pack(pop)
/*
    #version 300 es
    
    const vec2 _55[6] = vec2[](vec2(-1.0), vec2(1.0, -1.0), vec2(-1.0, 1.0), vec2(-1.0, 1.0), vec2(1.0, -1.0), vec2(1.0));
    
    uniform vec4 grating_display_vs_params[8];
    flat out float gid;
    out vec2 uv;
    flat out int left_or_right;
    
    void main()
    {
        int _18 = gl_VertexID % 12;
        bool _24 = _18 < 6;
        gid = grating_display_vs_params[7].x + float(gl_VertexID / 12);
        vec3 _59;
        if (_24)
        {
            _59 = grating_display_vs_params[3].xyz;
        }
        else
        {
            _59 = grating_display_vs_params[4].xyz;
        }
        vec2 _77 = normalize(grating_display_vs_params[1].xyz.xy);
        vec2 _87 = vec2(-_77.y, _77.x);
        vec2 _95 = (_87 * gid) * grating_display_vs_params[1].z;
        vec3 _105 = vec3(_95, grating_display_vs_params[1].w) - _59;
        vec2 _137 = _55[_18 % 6] * (vec2(grating_display_vs_params[2].x, grating_display_vs_params[0].x + grating_display_vs_params[0].y) * 0.5);
        vec2 _186 = ((-((grating_display_vs_params[6].xy - grating_display_vs_params[5].xy) / grating_display_vs_params[5].zw)) * grating_display_vs_params[0].xy + ((_95 + ((_105.xy * (-grating_display_vs_params[1].w)) / vec2(_105.z))) + ((_87 * _137.x) + (_77 * _137.y)))) / ((grating_display_vs_params[6].zw / grating_display_vs_params[5].zw) * grating_display_vs_params[0].xy);
        gl_Position = vec4(_186.x * 2.0 + (-1.0), -(_186.y * 2.0 + (-1.0)), 0.0, 1.0);
        uv = _186;
        uv.y = 1.0 - _186.y;
        left_or_right = int(_24);
    }
    
*/
static const char grating_display_vs_source_glsl300es[1437] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x63,0x6f,0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x35,0x35,0x5b,
    0x36,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,
    0x28,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,
    0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,
    0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x28,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,
    0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x38,0x5d,0x3b,0x0a,0x66,0x6c,0x61,0x74,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x67,0x69,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x3b,0x0a,0x66,0x6c,0x61,0x74,0x20,0x6f,0x75,0x74,0x20,0x69,0x6e,
    0x74,0x20,0x6c,0x65,0x66,0x74,0x5f,0x6f,0x72,0x5f,0x72,0x69,0x67,0x68,0x74,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x38,0x20,0x3d,0x20,0x67,0x6c,
    0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x20,0x25,0x20,0x31,0x32,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x34,0x20,0x3d,0x20,0x5f,
    0x31,0x38,0x20,0x3c,0x20,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x69,0x64,0x20,
    0x3d,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,
    0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x2e,0x78,
    0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,
    0x65,0x78,0x49,0x44,0x20,0x2f,0x20,0x31,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x32,0x34,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x35,0x39,0x20,0x3d,0x20,0x67,0x72,0x61,0x74,0x69,
    0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x35,0x39,0x20,0x3d,0x20,
    0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,
    0x20,0x5f,0x37,0x37,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,
    0x5f,0x38,0x37,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x5f,0x37,0x37,0x2e,
    0x79,0x2c,0x20,0x5f,0x37,0x37,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x32,0x20,0x5f,0x39,0x35,0x20,0x3d,0x20,0x28,0x5f,0x38,0x37,0x20,0x2a,
    0x20,0x67,0x69,0x64,0x29,0x20,0x2a,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,
    0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x31,0x30,0x35,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x39,0x35,
    0x2c,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,
    0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x77,
    0x29,0x20,0x2d,0x20,0x5f,0x35,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x31,0x33,0x37,0x20,0x3d,0x20,0x5f,0x35,0x35,0x5b,0x5f,0x31,0x38,
    0x20,0x25,0x20,0x36,0x5d,0x20,0x2a,0x20,0x28,0x76,0x65,0x63,0x32,0x28,0x67,0x72,
    0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x2c,0x20,0x67,0x72,
    0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x20,0x2b,0x20,0x67,
    0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x20,0x2a,
    0x20,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,
    0x5f,0x31,0x38,0x36,0x20,0x3d,0x20,0x28,0x28,0x2d,0x28,0x28,0x67,0x72,0x61,0x74,
    0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2e,0x78,0x79,0x20,0x2d,0x20,0x67,0x72,
    0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2f,
    0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2e,0x7a,0x77,
    0x29,0x29,0x20,0x2a,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,
    0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,
    0x5d,0x2e,0x78,0x79,0x20,0x2b,0x20,0x28,0x28,0x5f,0x39,0x35,0x20,0x2b,0x20,0x28,
    0x28,0x5f,0x31,0x30,0x35,0x2e,0x78,0x79,0x20,0x2a,0x20,0x28,0x2d,0x67,0x72,0x61,
    0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x77,0x29,0x29,0x20,0x2f,0x20,
    0x76,0x65,0x63,0x32,0x28,0x5f,0x31,0x30,0x35,0x2e,0x7a,0x29,0x29,0x29,0x20,0x2b,
    0x20,0x28,0x28,0x5f,0x38,0x37,0x20,0x2a,0x20,0x5f,0x31,0x33,0x37,0x2e,0x78,0x29,
    0x20,0x2b,0x20,0x28,0x5f,0x37,0x37,0x20,0x2a,0x20,0x5f,0x31,0x33,0x37,0x2e,0x79,
    0x29,0x29,0x29,0x29,0x20,0x2f,0x20,0x28,0x28,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,
    0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x36,0x5d,0x2e,0x7a,0x77,0x20,0x2f,0x20,0x67,0x72,0x61,0x74,0x69,
    0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2e,0x7a,0x77,0x29,0x20,0x2a,0x20,0x67,0x72,
    0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x31,0x38,0x36,0x2e,0x78,0x20,0x2a,0x20,
    0x32,0x2e,0x30,0x20,0x2b,0x20,0x28,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x2d,0x28,
    0x5f,0x31,0x38,0x36,0x2e,0x79,0x20,0x2a,0x20,0x32,0x2e,0x30,0x20,0x2b,0x20,0x28,
    0x2d,0x31,0x2e,0x30,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x5f,0x31,0x38,0x36,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x2e,0x79,0x20,0x3d,0x20,0x31,0x2e,0x30,
    0x20,0x2d,0x20,0x5f,0x31,0x38,0x36,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,
    0x65,0x66,0x74,0x5f,0x6f,0x72,0x5f,0x72,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x5f,0x32,0x34,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 grating_display_fs_params[3];
    uniform highp sampler2D left;
    uniform highp sampler2D right;
    
    flat in int left_or_right;
    in highp vec2 uv;
    layout(location = 0) out highp vec4 frag_color;
    flat in highp float gid;
    
    void main()
    {
        if (left_or_right == 1)
        {
            frag_color = vec4(texture(left, uv - ((grating_display_fs_params[1].xyz.xy * grating_display_fs_params[2].w) / grating_display_fs_params[0].xy)).xyz, 0.5);
        }
        else
        {
            frag_color = vec4(texture(right, uv - ((grating_display_fs_params[2].xyz.xy * grating_display_fs_params[2].w) / grating_display_fs_params[0].xy)).xyz, 0.5);
        }
    }
    
*/
static const char grating_display_fs_source_glsl300es[701] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,
    0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x3b,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6c,0x65,0x66,0x74,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x72,0x69,0x67,0x68,0x74,0x3b,0x0a,0x0a,0x66,0x6c,
    0x61,0x74,0x20,0x69,0x6e,0x20,0x69,0x6e,0x74,0x20,0x6c,0x65,0x66,0x74,0x5f,0x6f,
    0x72,0x5f,0x72,0x69,0x67,0x68,0x74,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x66,0x6c,0x61,0x74,0x20,
    0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x67,
    0x69,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x6c,0x65,0x66,0x74,0x5f,
    0x6f,0x72,0x5f,0x72,0x69,0x67,0x68,0x74,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x65,0x66,0x74,0x2c,0x20,0x75,0x76,0x20,
    0x2d,0x20,0x28,0x28,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,
    0x6c,0x61,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2e,0x78,0x79,0x7a,0x2e,0x78,0x79,0x20,0x2a,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,
    0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x77,0x29,0x20,0x2f,0x20,0x67,0x72,0x61,0x74,
    0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x29,0x29,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x72,0x69,0x67,0x68,0x74,0x2c,0x20,0x75,0x76,0x20,0x2d,0x20,0x28,0x28,0x67,0x72,
    0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0x5f,0x66,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x2e,0x78,
    0x79,0x20,0x2a,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,0x73,0x70,
    0x6c,0x61,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,
    0x2e,0x77,0x29,0x20,0x2f,0x20,0x67,0x72,0x61,0x74,0x69,0x6e,0x67,0x5f,0x64,0x69,
    0x73,0x70,0x6c,0x61,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x78,0x79,0x29,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x30,0x2e,0x35,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before grating_display.h"
#endif
static inline const sg_shader_desc* grating_display_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = grating_display_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "grating_display_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = grating_display_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 48;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "grating_display_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 3;
      desc.fs.images[0].name = "left";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "right";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "grating_display_shader";
    }
    return &desc;
  }
  return 0;
}
