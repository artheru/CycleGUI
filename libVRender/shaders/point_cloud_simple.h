#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input point_cloud_simple.glsl --output point_cloud_simple.h --slang glsl300es

    Overview:

        Shader program 'edl_composer':
            Get shader desc: edl_composer_shader_desc(sg_query_backend());
            Vertex shader: edl_composer_vs
                Attribute slots:
                    ATTR_edl_composer_vs_position = 0
            Fragment shader: edl_composer_fs
                Uniform block 'window':
                    C struct: window_t
                    Bind slot: SLOT_window = 0
                Image 'depth_hi_res':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_hi_res = 0
                Image 'depth_lo_res':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_depth_lo_res = 1
                Image 'color_hi_res':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_color_hi_res = 2

        Shader program 'point_cloud_simple':
            Get shader desc: point_cloud_simple_shader_desc(sg_query_backend());
            Vertex shader: point_cloud_vs
                Attribute slots:
                    ATTR_point_cloud_vs_position = 0
                    ATTR_point_cloud_vs_size = 1
                    ATTR_point_cloud_vs_color = 2
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: point_cloud_fs


    Shader descriptor structs:

        sg_shader edl_composer = sg_make_shader(edl_composer_shader_desc(sg_query_backend()));
        sg_shader point_cloud_simple = sg_make_shader(point_cloud_simple_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'point_cloud_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_point_cloud_vs_position] = { ... },
                    [ATTR_point_cloud_vs_size] = { ... },
                    [ATTR_point_cloud_vs_color] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'edl_composer_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_edl_composer_vs_position] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_depth_hi_res = 0;
        SLOT_depth_lo_res = 1;
        SLOT_color_hi_res = 2;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .mvp = ...;
            .dpi = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'window':

        window_t window = {
            .w = ...;
            .h = ...;
            .pnear = ...;
            .pfar = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_window, &SG_RANGE(window));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_point_cloud_vs_position (0)
#define ATTR_point_cloud_vs_size (1)
#define ATTR_point_cloud_vs_color (2)
#define ATTR_edl_composer_vs_position (0)
#define SLOT_depth_hi_res (0)
#define SLOT_depth_lo_res (1)
#define SLOT_color_hi_res (2)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    glm::mat4 mvp;
    float dpi;
    uint8_t _pad_68[12];
} vs_params_t;
#pragma pack(pop)
#define SLOT_window (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct window_t {
    float w;
    float h;
    float pnear;
    float pfar;
} window_t;
#pragma pack(pop)
/*
    #version 300 es
    
    uniform vec4 vs_params[5];
    layout(location = 0) in vec3 position;
    layout(location = 1) in float size;
    out vec4 v_Color;
    layout(location = 2) in vec4 color;
    
    void main()
    {
        vec4 _30 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(position, 1.0);
        gl_Position = _30;
        gl_PointSize = clamp(((size / sqrt(_30.z)) * 3.0) * vs_params[4].x + 2.0, 2.0, 32.0 * vs_params[4].x);
        v_Color = color;
    }
    
*/
static const char point_cloud_vs_source_glsl300es[442] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x76,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x30,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x5f,0x33,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x69,
    0x6e,0x74,0x53,0x69,0x7a,0x65,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,
    0x28,0x73,0x69,0x7a,0x65,0x20,0x2f,0x20,0x73,0x71,0x72,0x74,0x28,0x5f,0x33,0x30,
    0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x33,0x2e,0x30,0x29,0x20,0x2a,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,0x20,0x2b,0x20,0x32,
    0x2e,0x30,0x2c,0x20,0x32,0x2e,0x30,0x2c,0x20,0x33,0x32,0x2e,0x30,0x20,0x2a,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    layout(location = 0) out highp vec4 frag_color;
    in highp vec4 v_Color;
    
    void main()
    {
        frag_color = v_Color;
    }
    
*/
static const char point_cloud_fs_source_glsl300es[179] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,
    0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x5f,0x43,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x5f,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec2 position;
    out vec2 f_pos;
    
    void main()
    {
        gl_Position = vec4(position, 0.5, 1.0);
        f_pos = position + vec2(0.5);
    }
    
*/
static const char edl_composer_vs_source_glsl300es[169] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,
    0x2e,0x35,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    const vec2 _104[8] = vec2[](vec2(-1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(-1.0, 0.0), vec2(1.0, 0.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0));
    
    uniform highp vec4 window[1];
    uniform highp sampler2D depth_hi_res;
    uniform highp sampler2D depth_lo_res;
    uniform highp sampler2D color_hi_res;
    
    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 f_pos;
    
    highp float getld(highp float d)
    {
        return ((2.0 * window[0].z) * window[0].w) / ((-(d * 2.0 + (-1.0))) * (window[0].w - window[0].z) + (window[0].w + window[0].z));
    }
    
    void main()
    {
        highp vec2 _63 = vec2(1.0) / vec2(textureSize(depth_hi_res, 0));
        highp vec2 _70 = vec2(1.0) / vec2(textureSize(depth_lo_res, 0));
        highp vec2 _83 = gl_FragCoord.xy / vec2(window[0].x, window[0].y);
        highp vec4 _89 = texture(color_hi_res, _83);
        highp vec4 _108 = texture(depth_lo_res, _83);
        highp float _110 = _108.x;
        highp float dmax = _110;
        highp float dmin = _110;
        highp float param = _110;
        highp float _118 = getld(param);
        for (int i = 0; i < 8; i++)
        {
            highp vec4 _141 = texture(depth_lo_res, _104[i] * _70 + _83);
            highp float _142 = _141.x;
            bool _144 = _142 < 1.0;
            bool _155;
            if (_144)
            {
                highp float param_1 = _142;
                _155 = abs(getld(param_1) - _118) < 0.300000011920928955078125;
            }
            else
            {
                _155 = _144;
            }
            if (_155)
            {
                dmax = max(_142, dmax);
                dmin = min(_142, dmin);
            }
        }
        highp float param_2 = dmax;
        dmax = getld(param_2);
        highp float param_3 = dmin;
        highp float _171 = getld(param_3);
        dmin = _171;
        highp float fac = max(0.0, 0.4000000059604644775390625 / (pow(dmax - _171, 0.800000011920928955078125) + 0.4000000059604644775390625));
        highp float dhmin = 1.0;
        for (int i_1 = 0; i_1 < 8; i_1++)
        {
            highp vec4 _205 = texture(depth_hi_res, _104[i_1] * _63 + _83);
            highp float _206 = _205.x;
            if ((_206 > 0.0) && (_206 < 1.0))
            {
                dhmin = min(_206, dhmin);
            }
        }
        highp vec4 _222 = texture(depth_hi_res, _83);
        highp float _223 = _222.x;
        highp float centerDepth = _223;
        highp float param_4 = _223;
        centerDepth = getld(param_4);
        highp float param_5 = dhmin;
        highp float _229 = getld(param_5);
        dhmin = _229;
        if (_229 < centerDepth)
        {
            fac *= (1.0 - min((centerDepth - dhmin) * 2.2000000476837158203125, 1.0));
        }
        frag_color = vec4(_89.xyz * fac, _89.w);
    }
    
*/
static const char edl_composer_fs_source_glsl300es[2621] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x34,0x5b,0x38,
    0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x5b,0x5d,0x28,0x76,0x65,0x63,0x32,0x28,
    0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,
    0x20,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,
    0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x31,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,
    0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x69,0x6e,0x64,0x6f,
    0x77,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x65,
    0x70,0x74,0x68,0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,0x65,0x73,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x68,0x69,0x5f,0x72,0x65,0x73,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x68,
    0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x67,0x65,0x74,0x6c,0x64,
    0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x32,
    0x2e,0x30,0x20,0x2a,0x20,0x77,0x69,0x6e,0x64,0x6f,0x77,0x5b,0x30,0x5d,0x2e,0x7a,
    0x29,0x20,0x2a,0x20,0x77,0x69,0x6e,0x64,0x6f,0x77,0x5b,0x30,0x5d,0x2e,0x77,0x29,
    0x20,0x2f,0x20,0x28,0x28,0x2d,0x28,0x64,0x20,0x2a,0x20,0x32,0x2e,0x30,0x20,0x2b,
    0x20,0x28,0x2d,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x28,0x77,0x69,0x6e,
    0x64,0x6f,0x77,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x2d,0x20,0x77,0x69,0x6e,0x64,0x6f,
    0x77,0x5b,0x30,0x5d,0x2e,0x7a,0x29,0x20,0x2b,0x20,0x28,0x77,0x69,0x6e,0x64,0x6f,
    0x77,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x2b,0x20,0x77,0x69,0x6e,0x64,0x6f,0x77,0x5b,
    0x30,0x5d,0x2e,0x7a,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x36,0x33,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x64,0x65,0x70,0x74,0x68,
    0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x2c,0x20,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x37,0x30,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x76,
    0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,0x65,0x73,0x2c,0x20,0x30,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x38,0x33,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x77,
    0x69,0x6e,0x64,0x6f,0x77,0x5b,0x30,0x5d,0x2e,0x78,0x2c,0x20,0x77,0x69,0x6e,0x64,
    0x6f,0x77,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x68,0x69,0x5f,
    0x72,0x65,0x73,0x2c,0x20,0x5f,0x38,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x30,0x38,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x6c,
    0x6f,0x5f,0x72,0x65,0x73,0x2c,0x20,0x5f,0x38,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,
    0x30,0x20,0x3d,0x20,0x5f,0x31,0x30,0x38,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x6d,0x61,0x78,
    0x20,0x3d,0x20,0x5f,0x31,0x31,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x6d,0x69,0x6e,0x20,0x3d,0x20,
    0x5f,0x31,0x31,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x31,
    0x31,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x38,0x20,0x3d,0x20,0x67,0x65,0x74,0x6c,0x64,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,
    0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,
    0x20,0x38,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x6c,0x6f,0x5f,0x72,0x65,0x73,0x2c,0x20,0x5f,
    0x31,0x30,0x34,0x5b,0x69,0x5d,0x20,0x2a,0x20,0x5f,0x37,0x30,0x20,0x2b,0x20,0x5f,
    0x38,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x32,0x20,0x3d,0x20,
    0x5f,0x31,0x34,0x31,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x34,0x34,0x20,0x3d,0x20,0x5f,0x31,0x34,0x32,
    0x20,0x3c,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x35,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x34,0x34,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x31,0x34,0x32,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x35,0x20,
    0x3d,0x20,0x61,0x62,0x73,0x28,0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x29,0x20,0x2d,0x20,0x5f,0x31,0x31,0x38,0x29,0x20,0x3c,0x20,0x30,
    0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,
    0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x35,0x20,0x3d,0x20,0x5f,
    0x31,0x34,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x35,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x6d,0x61,0x78,0x20,0x3d,0x20,0x6d,0x61,
    0x78,0x28,0x5f,0x31,0x34,0x32,0x2c,0x20,0x64,0x6d,0x61,0x78,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x6d,0x69,0x6e,0x20,
    0x3d,0x20,0x6d,0x69,0x6e,0x28,0x5f,0x31,0x34,0x32,0x2c,0x20,0x64,0x6d,0x69,0x6e,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x64,0x6d,0x61,
    0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x6d,0x61,0x78,0x20,0x3d,0x20,0x67,0x65,
    0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x64,0x6d,0x69,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x37,0x31,0x20,0x3d,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x6d,0x69,0x6e,0x20,0x3d,0x20,
    0x5f,0x31,0x37,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x66,0x61,0x63,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,
    0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,
    0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,
    0x20,0x2f,0x20,0x28,0x70,0x6f,0x77,0x28,0x64,0x6d,0x61,0x78,0x20,0x2d,0x20,0x5f,
    0x31,0x37,0x31,0x2c,0x20,0x30,0x2e,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,
    0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x29,
    0x20,0x2b,0x20,0x30,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x39,0x36,
    0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,0x36,0x32,0x35,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x64,0x68,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x5f,0x31,0x20,
    0x3d,0x20,0x30,0x3b,0x20,0x69,0x5f,0x31,0x20,0x3c,0x20,0x38,0x3b,0x20,0x69,0x5f,
    0x31,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,
    0x30,0x35,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x2c,0x20,0x5f,0x31,0x30,0x34,0x5b,
    0x69,0x5f,0x31,0x5d,0x20,0x2a,0x20,0x5f,0x36,0x33,0x20,0x2b,0x20,0x5f,0x38,0x33,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x30,0x36,0x20,0x3d,0x20,0x5f,0x32,
    0x30,0x35,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x28,0x5f,0x32,0x30,0x36,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x20,0x26,
    0x26,0x20,0x28,0x5f,0x32,0x30,0x36,0x20,0x3c,0x20,0x31,0x2e,0x30,0x29,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x68,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x6d,0x69,
    0x6e,0x28,0x5f,0x32,0x30,0x36,0x2c,0x20,0x64,0x68,0x6d,0x69,0x6e,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x32,0x32,0x32,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x65,
    0x70,0x74,0x68,0x5f,0x68,0x69,0x5f,0x72,0x65,0x73,0x2c,0x20,0x5f,0x38,0x33,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x32,0x32,0x33,0x20,0x3d,0x20,0x5f,0x32,0x32,0x32,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x44,0x65,0x70,0x74,0x68,0x20,0x3d,0x20,0x5f,
    0x32,0x32,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x5f,
    0x32,0x32,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x65,0x6e,0x74,0x65,0x72,0x44,
    0x65,0x70,0x74,0x68,0x20,0x3d,0x20,0x67,0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,
    0x20,0x64,0x68,0x6d,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x39,0x20,0x3d,0x20,0x67,
    0x65,0x74,0x6c,0x64,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x64,0x68,0x6d,0x69,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x32,0x39,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x32,0x39,0x20,0x3c,0x20,
    0x63,0x65,0x6e,0x74,0x65,0x72,0x44,0x65,0x70,0x74,0x68,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x61,0x63,0x20,0x2a,
    0x3d,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x6d,0x69,0x6e,0x28,0x28,0x63,0x65,
    0x6e,0x74,0x65,0x72,0x44,0x65,0x70,0x74,0x68,0x20,0x2d,0x20,0x64,0x68,0x6d,0x69,
    0x6e,0x29,0x20,0x2a,0x20,0x32,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x34,0x37,
    0x36,0x38,0x33,0x37,0x31,0x35,0x38,0x32,0x30,0x33,0x31,0x32,0x35,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x5f,0x38,0x39,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x66,0x61,0x63,0x2c,
    0x20,0x5f,0x38,0x39,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before point_cloud_simple.h"
#endif
static inline const sg_shader_desc* edl_composer_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = edl_composer_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = edl_composer_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "window";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "depth_hi_res";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "depth_lo_res";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "color_hi_res";
      desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "edl_composer_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* point_cloud_simple_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "size";
      desc.attrs[2].name = "color";
      desc.vs.source = point_cloud_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 80;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 5;
      desc.fs.source = point_cloud_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.label = "point_cloud_simple_shader";
    }
    return &desc;
  }
  return 0;
}
